[{"E:\\Lokian.eth\\src\\index.tsx":"1","E:\\Lokian.eth\\src\\AppContainer.tsx":"2","E:\\Lokian.eth\\src\\App.tsx":"3","E:\\Lokian.eth\\src\\utils\\txSuccess.js":"4","E:\\Lokian.eth\\src\\utils\\txFail.js":"5","E:\\Lokian.eth\\src\\wallet\\hooks.ts":"6","E:\\Lokian.eth\\src\\wallet\\connectors.ts":"7","E:\\Lokian.eth\\src\\StatBar.tsx":"8","E:\\Lokian.eth\\src\\sprites-copy\\index.js":"9","E:\\Lokian.eth\\src\\components\\arenaV2\\index.js":"10","E:\\Lokian.eth\\src\\components\\myLokiMons\\index.js":"11","E:\\Lokian.eth\\src\\components\\common\\index.js":"12","E:\\Lokian.eth\\src\\components\\myShop\\index.js":"13","E:\\Lokian.eth\\src\\components\\marketplace\\index.js":"14","E:\\Lokian.eth\\src\\components\\index.js":"15","E:\\Lokian.eth\\src\\components\\breed\\index.js":"16","E:\\Lokian.eth\\src\\components\\spinner\\index.js":"17","E:\\Lokian.eth\\src\\components\\share\\index.js":"18","E:\\Lokian.eth\\src\\components\\sharedToMe\\index.js":"19","E:\\Lokian.eth\\src\\components\\token\\index.js":"20","E:\\lokimons\\Lokian.eth\\src\\index.tsx":"21","E:\\lokimons\\Lokian.eth\\src\\AppContainer.tsx":"22","E:\\lokimons\\Lokian.eth\\src\\App.tsx":"23","E:\\lokimons\\Lokian.eth\\src\\utils\\txSuccess.js":"24","E:\\lokimons\\Lokian.eth\\src\\utils\\txFail.js":"25","E:\\lokimons\\Lokian.eth\\src\\wallet\\connectors.ts":"26","E:\\lokimons\\Lokian.eth\\src\\wallet\\hooks.ts":"27","E:\\lokimons\\Lokian.eth\\src\\StatBar.tsx":"28","E:\\lokimons\\Lokian.eth\\src\\components\\index.js":"29","E:\\lokimons\\Lokian.eth\\src\\components\\myLokiMons\\index.js":"30","E:\\lokimons\\Lokian.eth\\src\\components\\share\\index.js":"31","E:\\lokimons\\Lokian.eth\\src\\components\\spinner\\index.js":"32","E:\\lokimons\\Lokian.eth\\src\\components\\sharedToMe\\index.js":"33","E:\\lokimons\\Lokian.eth\\src\\components\\token\\index.js":"34","E:\\lokimons\\Lokian.eth\\src\\sprites\\index.js":"35","E:\\lokimons\\Lokian.eth\\src\\components\\token\\nftItem.js":"36","E:\\lokimons\\Lokian.eth\\src\\components\\dojo\\index.tsx":"37","E:\\lokimons\\Lokian.eth\\src\\components\\common\\index.tsx":"38","E:\\lokimons\\Lokian.eth\\src\\components\\breed\\index.tsx":"39","E:\\lokimons\\Lokian.eth\\src\\components\\dojo\\mySparringMons.tsx":"40","E:\\lokimons\\Lokian.eth\\src\\sprites-copy\\index.js":"41","E:\\lokimons\\Lokian.eth\\src\\components\\common\\listIcon.tsx":"42","E:\\lokimons\\Lokian.eth\\src\\components\\common\\gridIcon.tsx":"43","E:\\lokimons\\Lokian.eth\\src\\components\\common\\listRender.js":"44","E:\\lokimons\\Lokian.eth\\src\\components\\myShop\\index.tsx":"45","E:\\lokimons\\Lokian.eth\\src\\components\\common\\getMonsOrder.ts":"46","E:\\lokimons\\Lokian.eth\\src\\components\\marketplace\\index.tsx":"47","E:\\lokimons\\Lokian.eth\\src\\components\\arena\\index.tsx":"48"},{"size":376,"mtime":1651923712972,"results":"49","hashOfConfig":"50"},{"size":461,"mtime":1632416988498,"results":"51","hashOfConfig":"50"},{"size":51291,"mtime":1652898210987,"results":"52","hashOfConfig":"50"},{"size":408,"mtime":1648916010540,"results":"53","hashOfConfig":"50"},{"size":378,"mtime":1648916010540,"results":"54","hashOfConfig":"50"},{"size":2588,"mtime":1633872796792,"results":"55","hashOfConfig":"50"},{"size":220,"mtime":1651913486576,"results":"56","hashOfConfig":"50"},{"size":257,"mtime":1633872639985,"results":"57","hashOfConfig":"50"},{"size":7402,"mtime":1652285094578,"results":"58","hashOfConfig":"50"},{"size":3755,"mtime":1652895772508,"results":"59","hashOfConfig":"50"},{"size":908,"mtime":1652709216330,"results":"60","hashOfConfig":"50"},{"size":9337,"mtime":1652895819508,"results":"61","hashOfConfig":"50"},{"size":843,"mtime":1652812797057,"results":"62","hashOfConfig":"50"},{"size":774,"mtime":1652812532734,"results":"63","hashOfConfig":"50"},{"size":427,"mtime":1652897995620,"results":"64","hashOfConfig":"50"},{"size":1545,"mtime":1652895633042,"results":"65","hashOfConfig":"50"},{"size":822,"mtime":1652895068628,"results":"66","hashOfConfig":"50"},{"size":2806,"mtime":1652957851290,"results":"67","hashOfConfig":"50"},{"size":1583,"mtime":1652896969691,"results":"68","hashOfConfig":"50"},{"size":9829,"mtime":1652960160940,"results":"69","hashOfConfig":"50"},{"size":376,"mtime":1653117625364,"results":"70","hashOfConfig":"71"},{"size":443,"mtime":1653117467632,"results":"72","hashOfConfig":"71"},{"size":51598,"mtime":1655492298426,"results":"73","hashOfConfig":"71"},{"size":395,"mtime":1653117467741,"results":"74","hashOfConfig":"71"},{"size":365,"mtime":1653117467741,"results":"75","hashOfConfig":"71"},{"size":220,"mtime":1653117541394,"results":"76","hashOfConfig":"71"},{"size":2516,"mtime":1653117467741,"results":"77","hashOfConfig":"71"},{"size":245,"mtime":1653117467633,"results":"78","hashOfConfig":"71"},{"size":425,"mtime":1653489095267,"results":"79","hashOfConfig":"71"},{"size":3929,"mtime":1655824519797,"results":"80","hashOfConfig":"71"},{"size":3503,"mtime":1656306245717,"results":"81","hashOfConfig":"71"},{"size":822,"mtime":1653117625363,"results":"82","hashOfConfig":"71"},{"size":2118,"mtime":1654794477019,"results":"83","hashOfConfig":"71"},{"size":9949,"mtime":1654797051275,"results":"84","hashOfConfig":"71"},{"size":7091,"mtime":1653118961475,"results":"85","hashOfConfig":"71"},{"size":624,"mtime":1654794948456,"results":"86","hashOfConfig":"71"},{"size":5813,"mtime":1656261945067,"results":"87","hashOfConfig":"71"},{"size":9033,"mtime":1655991585612,"results":"88","hashOfConfig":"71"},{"size":3431,"mtime":1656305860214,"results":"89","hashOfConfig":"71"},{"size":1568,"mtime":1655991164020,"results":"90","hashOfConfig":"71"},{"size":7091,"mtime":1653118961475,"results":"91","hashOfConfig":"71"},{"size":642,"mtime":1654715020381,"results":"92","hashOfConfig":"71"},{"size":1051,"mtime":1654715124516,"results":"93","hashOfConfig":"71"},{"size":2278,"mtime":1655824915440,"results":"94","hashOfConfig":"71"},{"size":3820,"mtime":1655619248963,"results":"95","hashOfConfig":"71"},{"size":1633,"mtime":1655618664435,"results":"96","hashOfConfig":"71"},{"size":3863,"mtime":1655824915440,"results":"97","hashOfConfig":"71"},{"size":5327,"mtime":1656262045848,"results":"98","hashOfConfig":"71"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},"18w6p6u",{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"101"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"101"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"101"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"110"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},"1kcbm23",{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"147"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"147"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"147"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"156"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"156"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"147"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"147"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"147"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"147"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"147"},"E:\\Lokian.eth\\src\\index.tsx",[],["214","215"],"E:\\Lokian.eth\\src\\AppContainer.tsx",["216"],"import React from 'react'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport App from './App'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\n\r\nfunction getLibrary(provider: any): Web3Provider {\r\n  const library = new Web3Provider(provider)\r\n  library.pollingInterval = 12000\r\n  return library\r\n}\r\n\r\nexport default function () {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <App />\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n","E:\\Lokian.eth\\src\\App.tsx",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"import React, { useEffect, useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Link\n} from \"react-router-dom\";\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Nav, Navbar, NavDropdown, Tab, Tabs } from 'react-bootstrap'\nimport StatBar from './StatBar'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { MyLokiMons, ArenaV2, Breed, MyShop, Marketplace, Spinner, Share, SharedToMe, Token  } from \"./components\";\n\n// Library to work with Ethereum like blockchain\nimport { injected } from './wallet/connectors'\nimport { useEagerConnect, useInactiveListener } from './wallet/hooks'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { Contract } from '@ethersproject/contracts'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits, parseEther, formatEther } from '@ethersproject/units'\n\n// abis\nimport contrInterface from './interface.json' // Load contract json file\nimport erc20Interface from './erc20Interface.json' // Load erc20 contract json file\nimport nftInterface from './project.nft.abi.json'\n\n// Load all the background images for the 10 different Cryptomon types\nimport bg0 from './sprites-copy/background/0.png'\nimport bg1 from './sprites-copy/background/1.png'\nimport bg2 from './sprites-copy/background/2.png'\nimport bg3 from './sprites-copy/background/3.png'\nimport bg4 from './sprites-copy/background/4.png'\nimport bg5 from './sprites-copy/background/5.png'\nimport bg6 from './sprites-copy/background/6.png'\nimport bg7 from './sprites-copy/background/7.png'\nimport bg8 from './sprites-copy/background/8.png'\nimport bg9 from './sprites-copy/background/9.png'\nimport bg10 from './sprites-copy/background/10.png'\n\nimport MonImages from './sprites-copy'\n\n// util\nimport { Web3Provider } from '@ethersproject/providers'\nimport txSuccess from './utils/txSuccess'\nimport txFail from './utils/txFail'\n\nenum ConnectorNames {\n  Injected = 'Injected',\n}\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n}\n\nlet CONTRACT_ADDRESS: string\nlet ERC20_CONTRACT_ADDRESS: string\nlet ERC1155_CONTRACT_ADDRESS: string\nif (process && process.env) {\n  CONTRACT_ADDRESS =\n    process.env.NODE_ENV === 'production'\n      ? process.env.REACT_APP_MAIN_CONTRACT_ADDRESS\n      : process.env.REACT_APP_TEST_CONTRACT_ADDRESS\n  ERC20_CONTRACT_ADDRESS =\n    process.env.NODE_ENV === 'production' ? process.env.REACT_APP_MAIN_ERC20 : process.env.REACT_APP_TEST_ERC20\n  ERC1155_CONTRACT_ADDRESS =\n    process.env.NODE_ENV === 'production' ? process.env.REACT_APP_MAIN_ERC1155 : process.env.REACT_APP_TEST_ERC1155\n} else {\n  // polygon mainnet\n  CONTRACT_ADDRESS = '0x5148A559cFaaEC1A915ae41e00A8Dd2Fa17ba64f'\n  ERC20_CONTRACT_ADDRESS = '0x4d8d24968458af521ef02aefD95f161dF3f9Ea01'\n  ERC1155_CONTRACT_ADDRESS = '0x8227767903Fa90A90060E28a45506318E03997aD'\n}\n\n// Add background images in an array for easy access\nconst bg = [bg0, bg1, bg2, bg3, bg4, bg5, bg6, bg7, bg8, bg9, bg10]\n\n// Add all 151 Cryptomon names in an array\nconst names = [\n  'Dryad',\n  'Hamadryad',\n  'Leshy',\n  'Santelmo',\n  'Cerberus',\n  'Efreet',\n  'Fastitocalon',\n  'Aspidochelone',\n  'Zaratan',\n  'Arachne',\n  'Jorogumo',\n  'Tsuchigumo',\n  'Pabilsag',\n  'Girtablilu',\n  'Selket',\n  'Tsikavats',\n  'Munnin',\n  'Huginn',\n  'Azeban',\n  'Ratatoskr',\n  'Stratim',\n  'Navka',\n  'Apep',\n  'Nidhoggr',\n  'Raiju',\n  'Raijin',\n  'Amphivena',\n  'Basilisk',\n  'Wolpertinger',\n  'Ramidreju',\n  'Echinemon',\n  'Mujina',\n  'Kamaitachi',\n  'Lavellan',\n  'Vila',\n  'Huldra',\n  'Chimera',\n  'Kyuubi',\n  'Nixie',\n  'Tuathan',\n  'Minyades',\n  'Camazotz',\n  'Curupira',\n  'Penghou',\n  'Ghillie_Dhu',\n  'Myrmecoleon',\n  'Myrmidon',\n  'Mothman',\n  'Moth_King',\n  'Grootslang',\n  'Yaoguai',\n  'Cait_Sidhe',\n  'Cath_Balug',\n  'Nakki',\n  'Kappa',\n  'Satori',\n  'Shojo',\n  'Skohl',\n  'Haet',\n  'Vodyanoy',\n  'Undine',\n  'Melusine',\n  'Vukodlak',\n  'Chernobog',\n  'Djinn',\n  'Bauk',\n  'Troll',\n  'Jotun',\n  'Spriggan',\n  'Jubokko',\n  'Kodama',\n  'Bukavak',\n  'Kraken',\n  'Clayboy',\n  'Met',\n  'Emet',\n  'Sleipnir',\n  'Todorats',\n  'Scylla',\n  'Charybdis',\n  'Brontes',\n  'Arges',\n  'Hraesvelgr',\n  'Berunda',\n  'Cockatrice',\n  'Selkie',\n  'Rusalka',\n  'Tarasque',\n  'Meretseger',\n  'Carbuncle',\n  'Shen',\n  'Boogeyman',\n  'Banshee',\n  'Mare',\n  'Dilong',\n  'Incubus',\n  'Succubus',\n  'Cancer',\n  'Karkinos',\n  'Druk',\n  'Shenlong',\n  'Gan_Ceann',\n  'Oni',\n  'Tairanohone',\n  'Gashadokuro',\n  'Yeren',\n  'Yeti',\n  'Yowie',\n  'Nezhit',\n  'Chuma',\n  'Sigbin',\n  'Gargoyle',\n  'Caladrius',\n  'Umibozu',\n  'Callisto',\n  'Kelpie',\n  'Makara',\n  'Morgen',\n  'Merrow',\n  'Naiad',\n  'Nereid',\n  'Pixiu',\n  'Khepri',\n  'Likho',\n  'kitsune',\n  'Caorthannach',\n  'Kaggen',\n  'Audumbla',\n  'Lochness',\n  'Jormungandr',\n  'Leviathan',\n  'Doppelganger',\n  'Skvader',\n  'Fossegrim',\n  'Valkyrie',\n  'Basan',\n  'Tsukumogami',\n  'Luska',\n  'Hydra',\n  'Afanc',\n  'Cetus',\n  'Vedfolnir',\n  'Baku',\n  'Alkonost',\n  'Quetzalcoatl',\n  'Anzu',\n  'Zmey',\n  'Azhdaya',\n  'Fafnir',\n  'Baba_Yaga',\n  'Baba_Roga',\n]\n\nasync function getMons(_library, _account) {\n  const contr = new Contract(CONTRACT_ADDRESS, contrInterface, _library.getSigner(_account))\n  const totalMons = parseInt(await contr.totalMons())\n  return Promise.all([...Array(totalMons).keys()].map((id) => contr.mons(id)))\n}\n\nasync function approve(_library, _account, _amount) {\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\n  const newAmount = `${parseEther(_amount)}`\n  return await erc20Contr.approve(CONTRACT_ADDRESS, newAmount)\n}\n\nfunction Account() {\n  const { account } = useWeb3React()\n  return (\n    <span>\n      {account === null ? '-' : account ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}` : ''}\n    </span>\n  )\n}\n\nasync function getTokenBalance(_library, _account) {\n  if (!_library || !_account) {\n    return\n  }\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\n  const bal = await erc20Contr.balanceOf(_account)\n  return formatEther(BigNumber.from(bal?._hex).toBigInt())\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (error instanceof UserRejectedRequestErrorInjected) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction App() {\n  const [cryptomons, setCryptomons] = useState([])\n  const [myCryptomons, setMyCryptomons] = useState([])\n  const [otherCryptomons, setOtherCryptomons] = useState([])\n  const [value, setValue] = useState(0) // Used in My Cryptomons tab for input in price text\n  // Used in breeding tab\n  const [breedChoice1, setBreedChoice1] = useState(null)\n  const [breedChoice2, setBreedChoice2] = useState(null)\n  // Used in fighting tab\n  const [fightChoice1, setFightChoice1] = useState(null)\n  const [fightChoice2, setFightChoice2] = useState(null)\n  const [winner, setWinner] = useState(null) // Used to display winner of the last fight\n  const [rounds, setRounds] = useState(null) // Used to display number of rounds the fight lasted\n  const [shareId, setShareId] = useState('') // Used in shareId form input field\n  const [shareAddress, setShareAddress] = useState('') // Used in shareAddress form input field\n  const [tokenBalance, setTokenBalance] = useState('0')\n  const [fightTxDone, setFightTxDone] = useState(false)\n  const [rewards, setRewards] = useState(0)\n  const [healingPotions, setHealingPotions] = useState(null)\n  const [manaPotions, setManaPotions] = useState(null)\n  const [magicPotions, setMagicPotions] = useState(null)\n  const [swords, setSwords] = useState(null)\n  const [shields, setShields] = useState(null)\n  const [disableFightBtn, setDisableFightBtn] = useState(false)\n  const [buyItemAmount, setBuyItemAmount] = useState('0')\n  const [burnAmount, setBurnAmount] = useState('0')\n  const [disableBuyItemBtn, setDisableBuyItem] = useState(false)\n  const [isShareLoading, setIsShareLoading] = useState(false)\n  const [isStopSharingLoading, setIsStopSharingLoading] = useState(false)\n  const [isBreedMonLoading, setIsBreedMonLoading] = useState(false)\n  const [isBuyMonLoading, setIsBuyMonLoading] = useState(false)\n  const [isAddForSaleLoading, setIsAddForSaleLoading] = useState(false)\n  const [isRemoveFromSaleLoading, setIsRemoveFromSaleLoading] = useState(false)\n  const context = useWeb3React<Web3Provider>()\n  const { connector, account, library, activate, deactivate, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState<any>()\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n\n    refreshMons()\n  }, [activatingConnector, connector])\n\n  // Get token balance of user\n  useEffect(() => {\n    let mounted = true\n\n    getTokenBalance(library, account).then((res) => {\n      if (mounted) {\n        setTokenBalance(res)\n        refreshMons()\n      }\n    })\n\n    return () => {\n      mounted = false\n    }\n  }, [account, library, disableBuyItemBtn, disableFightBtn])\n\n  // Get contract events\n  useEffect(() => {\n    if (!library || !account) {\n      return\n    }\n\n    let mounted = true\n\n    ;(async function fightResults() {\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n\n      contr.on('FightResults', (_winnerId, _round) => {\n        if (mounted) {\n          const winId = BigNumber.from(_winnerId._hex).toNumber()\n          const round = BigNumber.from(_round._hex).toNumber()\n          setWinner(winId)\n          setRounds(round)\n          refreshMons()\n          setDisableFightBtn(false)\n        }\n      })\n\n      contr.on('Rewards', (_winnerId, _rewards) => {\n        if (mounted) {\n          const rewards = BigNumber.from(_rewards._hex).toNumber()\n          setRewards(rewards)\n          refreshMons()\n          setDisableFightBtn(false)\n        }\n      })\n    })()\n\n    return () => {\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n      contr.off('FightResults', (_winnerId, _round) => {\n        setDisableFightBtn(false)\n      })\n      contr.off('Rewards', (_winnerId, _round) => {\n        setDisableFightBtn(false)\n      })\n\n      mounted = false\n    }\n  }, [account, library, fightTxDone])\n\n  // Get items from nft contract\n  useEffect(() => {\n    if (!library || !account) {\n      return\n    }\n\n    let mounted = true\n\n    ;(async function () {\n      if (mounted) {\n        const nftContr = new Contract(ERC1155_CONTRACT_ADDRESS, nftInterface, library.getSigner(account))\n        const healpot = await nftContr.balanceOf(account, 0)\n        const manapot = await nftContr.balanceOf(account, 1)\n        const magicpot = await nftContr.balanceOf(account, 2)\n        const _swords = await nftContr.balanceOf(account, 3)\n        const _shields = await nftContr.balanceOf(account, 4)\n\n        setHealingPotions(BigNumber.from(healpot._hex).toBigInt())\n        setManaPotions(BigNumber.from(manapot._hex).toBigInt())\n        setMagicPotions(BigNumber.from(magicpot._hex).toBigInt())\n        setSwords(BigNumber.from(_swords._hex).toBigInt())\n        setShields(BigNumber.from(_shields._hex).toBigInt())\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [library, account, disableBuyItemBtn])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  // Change the list of created Crypromons saved in the state so UI refreshes after this call\n  async function refreshMons() {\n    if (!library || !account) return\n    await getMons(library, account)\n      .then((_mons) => {\n        // map result\n        const monsMap = _mons.map((mon) => ({\n          atk: mon.atk,\n          def: mon.def,\n          evolve: mon.evolve,\n          forSale: mon.forSale,\n          hp: mon.hp,\n          id: BigNumber.from(mon.id._hex).toNumber(),\n          monType: mon.monType,\n          owner: mon.owner,\n          price: BigNumber.from(mon.price._hex).toBigInt(),\n          sharedTo: mon.sharedTo,\n          species: mon.species,\n          speed: mon.speed,\n        }))\n        setCryptomons(monsMap)\n        setMyCryptomons(monsMap.filter((mon) => mon.owner === account))\n        setOtherCryptomons(monsMap.filter((mon) => mon.owner !== account))\n      })\n      .catch((err) => toast.error(err))\n  }\n\n  // Function that buys a Cryptomon through a smart contract function\n  async function buyMon(id, price) {\n    setIsBuyMonLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const newprice = `${BigInt(price)}`\n    let overrides = {\n      value: newprice,\n      gasLimit: 120000,\n    }\n\n    const tx = await contr.buyMon(id, overrides).catch((err) => setIsBuyMonLoading(false))\n    const recpt = await tx?.wait()\n    txSuccess(recpt, toast, refreshMons, (loadVal: boolean) => setIsBuyMonLoading(loadVal))\n    txFail(recpt, toast, (loadVal: boolean) => setIsBuyMonLoading(loadVal))\n  }\n\n  // Function that adds a Cryptomon for sale through a smart contract function\n  async function addForSale(id, price) {\n    setIsAddForSaleLoading(true)\n    if (price === 0 || price === '0') {\n      toast.error('🦄 Price is 0')\n      return\n    }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const tx = await contr.addForSale(id, parseEther(price), overrides).catch((err) => setIsAddForSaleLoading(false))\n    const receipt = await tx?.wait()\n    if (receipt && receipt.status === 1) {\n      toast.success(`Success, Tx hash: ${receipt.transactionHash}`)\n      refreshMons()\n      setIsAddForSaleLoading(false)\n    }\n    if (receipt && receipt.status === 0) {\n      toast.error(`Error, Tx hash: ${receipt.transactionHash}`)\n      setIsAddForSaleLoading(false)\n    }\n  }\n\n  // Function that removes a Cryptomon from sale through a smart contract function\n  async function removeFromSale(id) {\n    setIsRemoveFromSaleLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.removeFromSale(id, overrides).catch((err) => setIsRemoveFromSaleLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status === 1) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsRemoveFromSaleLoading(false)\n    }\n    if (recpt && recpt.status === 0) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsRemoveFromSaleLoading(false)\n    }\n  }\n\n  // Function that breeds 2 Cryptomons through a smart contract function\n  async function breedMons(id1, id2) {\n    setIsBreedMonLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const tx = await contr.breedMons(id1, id2).catch((err) => setIsBreedMonLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      setIsBreedMonLoading(false)\n    }\n\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsBreedMonLoading(false)\n    }\n\n    await refreshMons()\n  }\n\n  // Function that allows 2 Cryptomons to fight through a smart contract function\n  async function fight(id1, id2) {\n    setDisableFightBtn(true)\n    if (id1 === null || id2 === null) {\n      return\n    }\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    try {\n      const tx = await contr.fight(id1, id2, overrides).catch((err) => setDisableFightBtn(false))\n      const recpt = await tx?.wait()\n      if (recpt && recpt.status) {\n        setFightTxDone(true)\n      }\n\n      if (recpt && !recpt.status) {\n        toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n        setFightTxDone(false)\n      }\n    } catch (error) {\n      toast.error(`Fight function error: ${error.data?.message || ''}`)\n      setDisableFightBtn(false)\n    }\n  }\n\n  // Function that starts sharing a Cryptomon to another address through a smart contract function\n  async function startSharing(id, address) {\n    setIsShareLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.startSharing(id, address, overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  }\n\n  // Function that stops sharing a Cryptomon with other addresses through a smart contrct function\n  async function stopSharing(id) {\n    setIsStopSharingLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.stopSharing(id, overrides).catch((err) => setIsStopSharingLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsStopSharingLoading(false)\n    }\n\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsStopSharingLoading(false)\n    }\n  }\n\n  // Handlers for form inputs\n  function handleShareId(event) {\n    setShareId(event.target?.value)\n  }\n  function handleShareAddress(event) {\n    setShareAddress(event.target?.value)\n  }\n\n  function handleChange(event) {\n    setValue(event.target?.value)\n  }\n\n  function handleBuyItemAmount(event) {\n    setBuyItemAmount(event.target?.value)\n  }\n  function handleBurn(event) {\n    setBurnAmount(event.target?.value)\n  }\n\n  async function buyItem(units: string, price: string, itemNumber: string, data: string = '0x00') {\n    setDisableBuyItem(true)\n    if (!units || !price || !itemNumber) {\n      return\n    }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _price = parseEther(price)\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    approve(library, account, priceInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.buyItem(units, priceInWei, itemNumber, data, overrides)\n          const recpt = await tx?.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function burn(amount: string) {\n    setDisableBuyItem(true)\n    if (!amount) {\n      return\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    let overrides = {\n      gasLimit: 120000,\n    }\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.burn(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  // Components\n  // div that holds the name and id of each Cryptomon\n  const nameDiv = (mon) => {\n    return (\n      <div>\n        <label className=\"monName\">{names[mon?.species]}</label>\n        <label className=\"\" style={{ float: 'right' }}>\n          {'ID: ' + mon?.id}\n        </label>\n      </div>\n    )\n  }\n\n  // Function that  returns the style of the background image according to Cryptomons' type\n  const bgStyle = (Type) => ({\n    backgroundImage: 'url(' + bg[Type] + ')',\n    backgroundSize: '210px 240px',\n  })\n\n  // div that holds the images (Cryptomon image and background image) of a Cryptomon\n  const imgDiv = (mon) => {\n    return (\n      <div className=\"monBox\" style={bgStyle(mon?.monType)}>\n        <img className=\"monImg\" src={MonImages[`${parseInt(mon?.species) + 1}`]} alt={mon?.species} />\n      </div>\n    )\n  }\n\n  // div that holds the stats of a Cryptomon\n  const statDiv = (mon) => {\n    return (\n      <div className=\"stat-area\">\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Hp: </label>\n          <StatBar percentage={(mon?.hp * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Attack: </label>\n          <StatBar percentage={(mon?.atk * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Defense: </label>\n          <StatBar percentage={(mon?.def * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Speed: </label>\n          <StatBar percentage={(mon?.speed * 100) / 140} />\n        </div>\n      </div>\n    )\n  }\n\n  // Create the div with add for sale button\n  const addForSaleDiv = (mon, value) => {\n    return (\n      <div className=\"selling-div\">\n        <label className=\"add-for-sale-label\">Set creatures price:</label>\n        <input type=\"number\" className=\"add-for-sale-input\" value={value} onChange={(e) => handleChange(mon?.id, e)} />\n        {isAddForSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => addForSale(mon?.id, value)}\n          >\n            Add for sale\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with remove from sale button\n  const removeFromSaleDiv = (mon) => {\n    return (\n      <div className=\"selling-div\">\n        <label className=\"remove-from-sale-label\">\n          Price:\n          <br />\n          {formatUnits(mon?.price)}\n        </label>\n        {isRemoveFromSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => removeFromSale(mon?.id)}\n          >\n            Remove from sale\n            {isRemoveFromSaleLoading && <Spinner color=\"#000\" />}\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with buy button\n  const buyDiv = (mon) => {\n    return (\n      <div className=\"buying-div\">\n        <div className=\"sale-price\">\n          Price:\n          <br />\n          {formatUnits(mon?.price, 18)}\n        </div>\n        <div className=\"sale-owner\">Creature Owner: {mon?.owner} </div>\n        {isBuyMonLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"sale-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => buyMon(mon?.id, mon?.price)}\n          >\n            Buy\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with breed choice 1, choice 2 buttons\n  const breedDiv = (mon) => {\n    return (\n      <div className=\"breed-choice-div\">\n        <button\n          className=\"br-Choice-btn rpgui-button\"\n          type=\"button\"\n          style={{ float: 'right' }}\n          onClick={() => {\n            setBreedChoice1(mon?.id)\n          }}\n        >\n          Choice 1\n        </button>\n        <button\n          className=\"br-Choice-btn rpgui-button\"\n          type=\"button\"\n          style={{ float: 'right' }}\n          onClick={() => {\n            setBreedChoice2(mon?.id)\n          }}\n        >\n          Choice 2\n        </button>\n      </div>\n    )\n  }\n\n  const breedOption = (breedchoice) => {\n    if (breedchoice === null) {\n      return (\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            <figcaption>\n              <div className=\"monBox\">\n                {' '}\n                <img className=\"monImg\" src={MonImages['0']} alt={'empty'} />\n              </div>\n            </figcaption>\n          </figure>\n        </div>\n      )\n    } else {\n      return cryptomons\n        .filter((mon) => mon.id === breedchoice)\n        .map((mon) => (\n          <React.Fragment key={mon.id}>\n            <div className=\"mon\">\n              <figure className=\"my-figure\">\n                {imgDiv(mon)}\n                <figcaption></figcaption>\n              </figure>\n            </div>\n          </React.Fragment>\n        ))\n    }\n  }\n\n  // div with users Cryptomons\n  const myCryptomonsDiv = myCryptomons\n    .filter((mon) => !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {addForSaleDiv(mon, value)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's Cryptomons that are for sale\n  const forSaleCryptomons = myCryptomons\n    .filter((mon) => mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {removeFromSaleDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with Cryptomons available for buy to the user\n  const buyCryptomons = otherCryptomons\n    .filter((mon) => mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {buyDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's Cryptomons that can be used for breeding\n  const forBreedCryptomons = myCryptomons\n    .filter((mon) => !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {breedDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  const cond = (mon) =>\n    (mon.owner.toString().toLowerCase() === account?.toString()?.toLowerCase() && !mon.forSale) ||\n    (mon.sharedTo.toString().toLowerCase() === account?.toString()?.toLowerCase() &&\n      mon.owner.toString().toLowerCase() !== account?.toString()?.toLowerCase())\n\n  // div with user's Cryptomons that can be used to fight with\n  const forFightWithCryptomons = cryptomons.filter(cond).map((mon) => (\n    <React.Fragment key={mon.id}>\n      <div className=\"mon\">\n        <figure className=\"my-figure\">\n          {nameDiv(mon)}\n          {imgDiv(mon)}\n          <figcaption>{statDiv(mon)}</figcaption>\n        </figure>\n        <div className=\"fight-choice-div\">\n          <button\n            className=\"fight-Choice-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => {\n              setFightChoice1(mon.id)\n            }}\n          >\n            Choice 1\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  ))\n\n  // div with Cryptomons that user can fight against\n  const forFightAgainstCryptomons = otherCryptomons\n    .filter((mon) => !mon.forSale && mon.sharedTo.toLowerCase() !== account?.toString().toLocaleLowerCase())\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"fight-choice-div\">\n            <button\n              className=\"fight-Choice-btn rpgui-button\"\n              type=\"button\"\n              style={{ float: 'right' }}\n              onClick={() => {\n                setFightChoice2(mon.id)\n              }}\n            >\n              Choice 2\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's shared Cryptomons\n  const sharedByMe = myCryptomons\n    .filter((mon) => mon.sharedTo.toLowerCase() !== account?.toString().toLocaleLowerCase() && !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"sharing-div\">\n            <div className=\"shareTo-owner\">Shared to address: {mon.sharedTo} </div>\n            {isStopSharingLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"stop-sharing-btn rpgui-button\"\n                type=\"button\"\n                style={{ float: 'right' }}\n                onClick={() => stopSharing(mon.id)}\n              >\n                Stop sharing\n              </button>\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with Cryptomons shared to the user\n  const sharedToMe = otherCryptomons\n    .filter((mon) => mon.sharedTo === account)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"sharing-div\">\n            <label className=\"shared-owner\">Creature Owner: {mon.owner} </label>\n            {isStopSharingLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"stop-sharing-btn rpgui-button\"\n                type=\"button\"\n                style={{ float: 'right' }}\n                onClick={() => stopSharing(mon.id)}\n              >\n                Stop sharing\n              </button>\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // Function that does all the rendering of the application\n  return (\n    // Creation of the different tabs of the UI\n    <div className=\"rpgui-content\">\n      <ToastContainer />\n      <Router>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand as=\"li\">\n          <img alt=\"\" src={MonImages['favicon32x32']} width=\"30\" height=\"30\" className=\"d-inline-block\" /> \n          <Link to='/'>Lokian Monsters</Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n          <Nav.Link as=\"li\"><Link to='/myLokiMons'>My LokiMons</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/myShop'>My Shop</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/arena'>Arena</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/breed'>Breed</Link></Nav.Link>\n            <NavDropdown title=\"Others\" id=\"collasible-nav-dropdown\">\n                 <NavDropdown.Item as=\"li\"><Link to='/marketplace'>Marketplace</Link></NavDropdown.Item>\n                 <NavDropdown.Item as=\"li\"><Link to='/share'>Share</Link></NavDropdown.Item>\n              <NavDropdown.Item as=\"li\"><Link to='/sharedToMe'>Shared To Me</Link></NavDropdown.Item>\n              <NavDropdown.Item as=\"li\"><Link to='/token'>Token</Link></NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item as=\"li\"><Link to='https://lokian.monster'>Website</Link></NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link as=\"li\">\n              {/* Network Errors */}\n              {!!error && <h4>{getErrorMessage(error)}</h4>}\n            </Nav.Link>\n          </Nav>\n          <Nav>\n            {/* wallet info */}\n            {Object.keys(connectorsByName).map((name, idx) => {\n              const currentConnector = connectorsByName[name]\n              const activating = currentConnector === activatingConnector\n              const connected = currentConnector === connector\n              const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n              return (\n                <Nav.Link key={name + idx} as=\"li\">\n                  <button\n                    className=\"rpgui-button golden\"\n                    type=\"button\"\n                    style={{\n                      fontSize: '20px',\n                      paddingTop: '14px',\n                      width: '100%',\n                    }}\n                    onClick={() => {\n                      setActivatingConnector(currentConnector)\n                      activate(currentConnector)\n                    }}\n                    disabled={disabled}\n                    key={name}\n                  >\n                    {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}\n                    <Account />\n                    <div style={{ display: 'none' }}>{name}</div>\n                    {!account ? 'Connect Wallet' : ''}\n                  </button>\n                </Nav.Link>\n              )\n            })}\n            {/* wallet logout */}\n            <Nav.Link as=\"li\">\n              {(active || error) && (\n                <button\n                  className=\"rpgui-button\"\n                  onClick={() => {\n                    deactivate()\n                    setCryptomons([])\n                    setMyCryptomons([])\n                    setOtherCryptomons([])\n                    setWinner(null)\n                    setRounds(null)\n                    setValue(0)\n                  }}\n                >\n                  Logout\n                </button>\n              )}\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Routes>\n      <Route path=\"/\" element={<MyLokiMons myCryptomons={myCryptomons} value={value} onHandleChange={(e) => handleChange(e)} isAddForSaleLoading={isAddForSaleLoading} addForSale={addForSale}/>} />        \n          <Route path=\"/myLokiMons\" element={<MyLokiMons myCryptomons={myCryptomons} value={value} onHandleChange={(e) => handleChange(e)} isAddForSaleLoading={isAddForSaleLoading} addForSale={addForSale}/>} />        \n          <Route path=\"/myShop\" element={<MyShop myCryptomons={myCryptomons} isRemoveFromSaleLoading={isRemoveFromSaleLoading} removeFromSale={removeFromSale} />} />\n          <Route path=\"/marketplace\" element={<Marketplace otherCryptomons={otherCryptomons} isBuyMonLoading={isBuyMonLoading} buyMon={buyMon}/>} />\n          <Route path=\"/breed\"  element={<Breed myCryptomons={myCryptomons} isBreedMonLoading={isBreedMonLoading} breedMons={breedMons} setBreedChoice1Func={setBreedChoice1} setBreedChoice2Func={setBreedChoice2} breedChoice1={breedChoice1} breedChoice2={breedChoice2} />} />\n          <Route path=\"/arena\" element={<ArenaV2 />} />\n          <Route path=\"/share\" element={<Share myCryptomons={myCryptomons} shareId={shareId} onHandleShareAddress={handleShareAddress} onHandleShareId={handleShareId} shareAddress={shareAddress} \n            isShareLoading={isShareLoading} startSharingFunc={startSharing} account={account} isStopSharingLoading={isStopSharingLoading} stopSharingFunc={stopSharing}\n          />} />\n          <Route path=\"/sharedToMe\" element={<SharedToMe otherCryptomons={otherCryptomons} account={account} isStopSharingLoading={isStopSharingLoading} stopSharingFunc={stopSharing} />} />\n          <Route path=\"/token\" element={<Token \n            tokenBalance={tokenBalance} swords={swords} shields={shields} healingPotions={healingPotions} manaPotions={manaPotions} magicPotions={magicPotions}\n            buyItemAmount={buyItemAmount} onHandleBuyItemAmount={handleBuyItemAmount} buyItemFunc={buyItem} disableBuyItemBtn={disableBuyItemBtn} burnAmount={burnAmount} burnFunc={burn} onHandleBurn={handleBurn}\n          />} />\n        </Routes>\n      </Router>\n      <Tabs defaultActiveKey=\"myCryptomons\" id=\"uncontrolled-tab-example\">\n        {/* <Tab className=\"x\" eventKey=\"myCryptomons\" title=\"My LokiMons\">\n          <div className=\"p1 green-glow\">My LokiMons</div>\n          {myCryptomonsDiv}\n        </Tab> */}\n        {/* <Tab eventKey=\"forSale\" title=\"My Shop\">\n          <div className=\"p1 green-glow\">My Shop</div>\n          {forSaleCryptomons}\n        </Tab>\n        <Tab eventKey=\"buyCryptomons\" title=\"Marketplace\">\n          <div className=\"p1 green-glow\">Marketplace</div>\n          {buyCryptomons}\n        </Tab> */}\n        {/* <Tab eventKey=\"breedCryptomons\" title=\"Breed\">\n          <div className=\"p1 green-glow\">Breed</div>\n          <div className=\"breeding-area\">\n            {breedOption(breedChoice1)}\n            {breedOption(breedChoice2)}\n            {isBreedMonLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"rpgui-button\"\n                type=\"button\"\n                style={{ width: '420px' }}\n                onClick={() => breedMons(breedChoice1, breedChoice2)}\n              >\n                Breed choosen creatures\n              </button>\n            )}\n          </div>\n          <br />\n          {forBreedCryptomons}\n        </Tab> */}\n        {/* <Tab eventKey=\"fight\" title=\"Arena\">\n          <div className=\"p1 green-glow\">V S</div>\n          <div className=\"fighting-area\">\n            {breedOption(fightChoice1)}\n            {breedOption(fightChoice2)}\n\n            <label className=\"winner-label\">\n              And the winner is...{' '}\n              {fightTxDone ? names[cryptomons.find((mon) => mon.id?.toString() === winner?.toString())?.species] : ''}\n              {!winner || winner == 12345678911 ? 'still unknown' : ''}\n              {winner == 12345678910 ? \"no one, it's a tie\" : ''}\n            </label>\n\n            {fightTxDone && winner !== 12345678910 ? (\n              <>\n                <br />\n                <label className=\"winner-label\">Winning creature's Id: {winner}</label>\n                <br />\n                <label className=\"winner-label\">Rounds the fight lasted: {rounds}</label>\n                <br />\n\n                {!fightTxDone && rewards === 0 && !winner ? (\n                  ''\n                ) : (\n                  <label className=\"winner-label\">{rewards === 0 ? '' : `You have won ${rewards} LOKs!`}</label>\n                )}\n              </>\n            ) : (\n              ''\n            )}\n\n            {disableFightBtn ? (\n              <Spinner color=\"gray\" style={{ marginLeft: '50%', marginRight: 'auto', padding: '8px' }} />\n            ) : (\n              <button\n                id=\"fight-btn\"\n                className=\"rpgui-button\"\n                type=\"button\"\n                onClick={() => {\n                  setWinner(null)\n                  setRounds(null)\n                  setFightTxDone(false)\n                  setRewards(0)\n                  fight(fightChoice1, fightChoice2)\n                }}\n                disabled={disableFightBtn}\n              >\n                Fight with choosen creatures\n              </button>\n            )}\n          </div>\n          <div className=\"fight-mons-area\">\n            <div className=\"fightWith-area\">\n              <div className=\"p2\">Your LokiMons</div>\n              {forFightWithCryptomons}\n            </div>\n            <div className=\"fightAgainst-area\">\n              <div className=\"p2\">Opponent LokiMons</div>\n              {forFightAgainstCryptomons}\n            </div>\n          </div>\n        </Tab> */}\n        {/* <Tab eventKey=\"arenav2\" title=\"ArenaV2\">\n          <ArenaV2 />\n        </Tab> */}\n        {/* <Tab eventKey=\"share\" title=\"Share\">\n          <div className=\"p1 green-glow\">Sharing Management</div>\n          <div className=\"sharing-area\">\n            <div className=\"form-line\">\n              <label className=\"form-label\">Creature Id:</label>\n              <input className=\"form-input\" value={shareId} onChange={(e) => handleShareId(e)} />\n            </div>\n            <div className=\"form-line\">\n              <label className=\"form-label\">Share to address:</label>\n              <input className=\"form-input\" value={shareAddress} onChange={(e) => handleShareAddress(e)} />\n            </div>\n            <div className=\"form-line\">\n              {isShareLoading ? (\n                <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                  <Spinner color=\"#000\" />\n                </button>\n              ) : (\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => startSharing(shareId, shareAddress)}\n                >\n                  Share\n                </button>\n              )}\n            </div>\n          </div>\n          {sharedByMe}\n        </Tab> */}\n        {/* <Tab eventKey=\"sharedToMe\" title=\"Shared To Me\">\n          <div className=\"p1 green-glow\">Shared To You</div>\n          {sharedToMe}\n        </Tab>\n        <Tab eventKey=\"token\" title=\"Token\">\n          <div className=\"p1 green-glow\">Your tokens</div>\n\n          <div className=\"p1\" style={{ padding: '12px' }}>\n            {tokenBalance} Lokians\n          </div>\n          <br />\n          <br />\n          <div className=\"p1 green-glow\">\n            Your items\n            <div style={{ marginLeft: '45%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div className=\"column\">\n                  {!swords ? <div className=\"rpgui-icon weapon-slot\"></div> : <div className=\"rpgui-icon sword\"></div>}\n                  {!shields ? (\n                    <div className=\"rpgui-icon shield-slot\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon shield\"></div>\n                  )}\n                  {healingPotions || manaPotions || magicPotions ? (\n                    <div className=\"rpgui-icon potion-red\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon potion-slot\"></div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <br />\n            <div style={{ marginLeft: '40%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p>\n                  <p>You have {`${healingPotions}`} healing potions!</p>\n                  <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            <div className=\"p1\">Buy somethin (NFT)</div>\n            <div className=\"p1\">note: if transaction fails, set gas fees above 100k</div>\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon sword\"></div> A Sword (500 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '500', '3')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon shield\"></div> A Shield (500 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '500', '4')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '50', '0')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-blue\"></div> A Mana Potion (50 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '50', '1')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-green\"></div> A Magic Potion (50 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '50', '2')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            <div className=\"p1\">Give to the skeleton people (burn token)</div>\n            <div className=\"p1\">note: if transaction fails, set gas fees above 100k</div>\n            <div className=\"skellies\">\n              <img className=\"monImg\" src={MonImages['skelly']} alt=\"skeleton-people-1\" />\n              <img className=\"monImg\" src={MonImages['skelly2']} alt=\"skeleton-people-1\" />\n              <img className=\"monImg\" src={MonImages['skellyrip']} alt=\"skeleton-people-1\" />\n            </div>\n            <div className=\"sharing-area\">\n              <div className=\"form-line with-burn\">\n                <label className=\"form-label\">Amount</label>\n                <input className=\"form-input\" placeholder=\"0\" value={burnAmount} onChange={(e) => handleBurn(e)} />\n              </div>\n              <div className=\"form-line with-burn\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => burn(burnAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                  Give\n                </button>\n              </div>\n            </div>\n          </div>\n        </Tab> */}\n      </Tabs>\n    </div>\n  )\n}\n\nexport default App\n","E:\\Lokian.eth\\src\\utils\\txSuccess.js",[],["236","237"],"E:\\Lokian.eth\\src\\utils\\txFail.js",[],"E:\\Lokian.eth\\src\\wallet\\hooks.ts",["238"],"import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nimport { injected } from './connectors'\r\n\r\nexport function useEagerConnect() {\r\n    const { activate, active } = useWeb3React()\r\n  \r\n    const [tried, setTried] = useState(false)\r\n  \r\n    useEffect(() => {\r\n      injected.isAuthorized().then((isAuthorized: boolean) => {\r\n        if (isAuthorized) {\r\n          activate(injected, undefined, true).catch(() => {\r\n            setTried(true)\r\n          })\r\n        } else {\r\n          setTried(true)\r\n        }\r\n      })\r\n    }, []) // intentionally only running on mount (make sure it's only mounted once :))\r\n  \r\n    // if the connection worked, wait until we get confirmation of that to flip the flag\r\n    useEffect(() => {\r\n      if (!tried && active) {\r\n        setTried(true)\r\n      }\r\n    }, [tried, active])\r\n  \r\n    return tried\r\n  }\r\n\r\n  export function useInactiveListener(suppress: boolean = false) {\r\n    const { active, error, activate } = useWeb3React()\r\n  \r\n    useEffect((): any => {\r\n      const { ethereum } = window as any\r\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n        const handleConnect = () => {\r\n          console.log(\"Handling 'connect' event\")\r\n          activate(injected)\r\n        }\r\n        const handleChainChanged = (chainId: string | number) => {\r\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\r\n          activate(injected)\r\n        }\r\n        const handleAccountsChanged = (accounts: string[]) => {\r\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\r\n          if (accounts.length > 0) {\r\n            activate(injected)\r\n          }\r\n        }\r\n        const handleNetworkChanged = (networkId: string | number) => {\r\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\r\n          activate(injected)\r\n        }\r\n  \r\n        ethereum.on('connect', handleConnect)\r\n        ethereum.on('chainChanged', handleChainChanged)\r\n        ethereum.on('accountsChanged', handleAccountsChanged)\r\n        ethereum.on('networkChanged', handleNetworkChanged)\r\n  \r\n        return () => {\r\n          if (ethereum.removeListener) {\r\n            ethereum.removeListener('connect', handleConnect)\r\n            ethereum.removeListener('chainChanged', handleChainChanged)\r\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\r\n          }\r\n        }\r\n      }\r\n    }, [active, error, suppress, activate])\r\n  }","E:\\Lokian.eth\\src\\wallet\\connectors.ts",[],"E:\\Lokian.eth\\src\\StatBar.tsx",[],"E:\\Lokian.eth\\src\\sprites-copy\\index.js",[],"E:\\Lokian.eth\\src\\components\\arenaV2\\index.js",["239","240","241","242"],"import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../../App.css'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport Spinner from '../spinner'\r\nimport { Container, Row, Col, Table } from 'react-bootstrap'\r\nimport { useState } from 'react'\r\n\r\nconst btnStyle = {\r\n  height: '38px',\r\n}\r\n\r\nconst ArenaV2 = () => {\r\n  const [online, setOnline] = useState('6')\r\n  return (\r\n    <>\r\n      <div className=\"p1 green-glow\">Arena V2</div>\r\n      <div\r\n        className=\"rpgui-container framed\"\r\n        style={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          display: 'block',\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n        }}\r\n      >\r\n        <Container fluid>\r\n          <Row>\r\n            <Col sm={12} xs={12} md={6} lg={6} xl={6}>\r\n              <span style={{ fontSize: '18px' }} className=\"float-left\">\r\n                Online: {online || '0'}\r\n              </span>\r\n            </Col>\r\n            <Col sm={12} xs={12} md={6} lg={6} xl={6}>\r\n              <div className=\"float-right\">\r\n                <button className=\"rpgui-button\" type=\"button\">\r\n                  <span style={{ fontSize: '18px' }}>+</span> Create Room\r\n                </button>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row></Row>\r\n          <Row>\r\n            <Col>\r\n              <Table striped bordered hover variant=\"dark\" responsive>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Players</th>\r\n                    <th>Rounds</th>\r\n                    <th>Status</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>1</td>\r\n                    <td>0x12345abcde, 0x22345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Join\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>2</td>\r\n                    <td>0x32345abcde, 0x42345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Join\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>3</td>\r\n                    <td>0x52345abcde, 0x62345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Join\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ArenaV2\r\n","E:\\Lokian.eth\\src\\components\\myLokiMons\\index.js",[],"E:\\Lokian.eth\\src\\components\\common\\index.js",[],"E:\\Lokian.eth\\src\\components\\myShop\\index.js",[],"E:\\Lokian.eth\\src\\components\\marketplace\\index.js",[],"E:\\Lokian.eth\\src\\components\\index.js",[],"E:\\Lokian.eth\\src\\components\\breed\\index.js",[],"E:\\Lokian.eth\\src\\components\\spinner\\index.js",[],"E:\\Lokian.eth\\src\\components\\share\\index.js",[],"E:\\Lokian.eth\\src\\components\\sharedToMe\\index.js",[],"E:\\Lokian.eth\\src\\components\\token\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\index.tsx",[],["243","244"],"E:\\lokimons\\Lokian.eth\\src\\AppContainer.tsx",["245"],"import React from 'react'\nimport { Web3ReactProvider } from '@web3-react/core'\nimport App from './App'\nimport { Web3Provider } from '@ethersproject/providers'\n\nfunction getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n","E:\\lokimons\\Lokian.eth\\src\\App.tsx",["246","247","248","249","250","251","252","253","254","255","256","257","258","259"],"import React, { useEffect, useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Link\n} from \"react-router-dom\";\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Nav, Navbar, NavDropdown, Tab, Tabs } from 'react-bootstrap'\nimport StatBar from './StatBar'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { MyLokiMons, ArenaV2, Breed, MyShop, Marketplace, Spinner, Share, SharedToMe, Token  } from \"./components\";\n\n// Library to work with Ethereum like blockchain\nimport { injected } from './wallet/connectors'\nimport { useEagerConnect, useInactiveListener } from './wallet/hooks'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { Contract } from '@ethersproject/contracts'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits, parseEther, formatEther } from '@ethersproject/units'\n\n// abis\nimport contrInterface from './interface.json' // Load contract json file\nimport erc20Interface from './erc20Interface.json' // Load erc20 contract json file\nimport nftInterface from './project.nft.abi.json'\n\n// Load all the background images for the 10 different Cryptomon types\nimport bg0 from './sprites-copy/background/0.png'\nimport bg1 from './sprites-copy/background/1.png'\nimport bg2 from './sprites-copy/background/2.png'\nimport bg3 from './sprites-copy/background/3.png'\nimport bg4 from './sprites-copy/background/4.png'\nimport bg5 from './sprites-copy/background/5.png'\nimport bg6 from './sprites-copy/background/6.png'\nimport bg7 from './sprites-copy/background/7.png'\nimport bg8 from './sprites-copy/background/8.png'\nimport bg9 from './sprites-copy/background/9.png'\nimport bg10 from './sprites-copy/background/10.png'\n\nimport MonImages from './sprites-copy'\n\n// util\nimport { Web3Provider } from '@ethersproject/providers'\nimport txSuccess from './utils/txSuccess'\nimport txFail from './utils/txFail'\nimport Dojo from './components/dojo';\n\nenum ConnectorNames {\n  Injected = 'Injected',\n}\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n}\n\nlet CONTRACT_ADDRESS: string\nlet ERC20_CONTRACT_ADDRESS: string\nlet ERC1155_CONTRACT_ADDRESS: string\nif (process && process.env) {\n  CONTRACT_ADDRESS =\n    process.env.NODE_ENV === 'production'\n      ? process.env.REACT_APP_MAIN_CONTRACT_ADDRESS\n      : process.env.REACT_APP_TEST_CONTRACT_ADDRESS\n  ERC20_CONTRACT_ADDRESS =\n    process.env.NODE_ENV === 'production' ? process.env.REACT_APP_MAIN_ERC20 : process.env.REACT_APP_TEST_ERC20\n  ERC1155_CONTRACT_ADDRESS =\n    process.env.NODE_ENV === 'production' ? process.env.REACT_APP_MAIN_ERC1155 : process.env.REACT_APP_TEST_ERC1155\n} else {\n  // polygon mainnet\n  CONTRACT_ADDRESS = '0x5148A559cFaaEC1A915ae41e00A8Dd2Fa17ba64f'\n  ERC20_CONTRACT_ADDRESS = '0x4d8d24968458af521ef02aefD95f161dF3f9Ea01'\n  ERC1155_CONTRACT_ADDRESS = '0x8227767903Fa90A90060E28a45506318E03997aD'\n}\n\n// Add background images in an array for easy access\nconst bg = [bg0, bg1, bg2, bg3, bg4, bg5, bg6, bg7, bg8, bg9, bg10]\n\n// Add all 151 Cryptomon names in an array\nconst names = [\n  'Dryad',\n  'Hamadryad',\n  'Leshy',\n  'Santelmo',\n  'Cerberus',\n  'Efreet',\n  'Fastitocalon',\n  'Aspidochelone',\n  'Zaratan',\n  'Arachne',\n  'Jorogumo',\n  'Tsuchigumo',\n  'Pabilsag',\n  'Girtablilu',\n  'Selket',\n  'Tsikavats',\n  'Munnin',\n  'Huginn',\n  'Azeban',\n  'Ratatoskr',\n  'Stratim',\n  'Navka',\n  'Apep',\n  'Nidhoggr',\n  'Raiju',\n  'Raijin',\n  'Amphivena',\n  'Basilisk',\n  'Wolpertinger',\n  'Ramidreju',\n  'Echinemon',\n  'Mujina',\n  'Kamaitachi',\n  'Lavellan',\n  'Vila',\n  'Huldra',\n  'Chimera',\n  'Kyuubi',\n  'Nixie',\n  'Tuathan',\n  'Minyades',\n  'Camazotz',\n  'Curupira',\n  'Penghou',\n  'Ghillie_Dhu',\n  'Myrmecoleon',\n  'Myrmidon',\n  'Mothman',\n  'Moth_King',\n  'Grootslang',\n  'Yaoguai',\n  'Cait_Sidhe',\n  'Cath_Balug',\n  'Nakki',\n  'Kappa',\n  'Satori',\n  'Shojo',\n  'Skohl',\n  'Haet',\n  'Vodyanoy',\n  'Undine',\n  'Melusine',\n  'Vukodlak',\n  'Chernobog',\n  'Djinn',\n  'Bauk',\n  'Troll',\n  'Jotun',\n  'Spriggan',\n  'Jubokko',\n  'Kodama',\n  'Bukavak',\n  'Kraken',\n  'Clayboy',\n  'Met',\n  'Emet',\n  'Sleipnir',\n  'Todorats',\n  'Scylla',\n  'Charybdis',\n  'Brontes',\n  'Arges',\n  'Hraesvelgr',\n  'Berunda',\n  'Cockatrice',\n  'Selkie',\n  'Rusalka',\n  'Tarasque',\n  'Meretseger',\n  'Carbuncle',\n  'Shen',\n  'Boogeyman',\n  'Banshee',\n  'Mare',\n  'Dilong',\n  'Incubus',\n  'Succubus',\n  'Cancer',\n  'Karkinos',\n  'Druk',\n  'Shenlong',\n  'Gan_Ceann',\n  'Oni',\n  'Tairanohone',\n  'Gashadokuro',\n  'Yeren',\n  'Yeti',\n  'Yowie',\n  'Nezhit',\n  'Chuma',\n  'Sigbin',\n  'Gargoyle',\n  'Caladrius',\n  'Umibozu',\n  'Callisto',\n  'Kelpie',\n  'Makara',\n  'Morgen',\n  'Merrow',\n  'Naiad',\n  'Nereid',\n  'Pixiu',\n  'Khepri',\n  'Likho',\n  'kitsune',\n  'Caorthannach',\n  'Kaggen',\n  'Audumbla',\n  'Lochness',\n  'Jormungandr',\n  'Leviathan',\n  'Doppelganger',\n  'Skvader',\n  'Fossegrim',\n  'Valkyrie',\n  'Basan',\n  'Tsukumogami',\n  'Luska',\n  'Hydra',\n  'Afanc',\n  'Cetus',\n  'Vedfolnir',\n  'Baku',\n  'Alkonost',\n  'Quetzalcoatl',\n  'Anzu',\n  'Zmey',\n  'Azhdaya',\n  'Fafnir',\n  'Baba_Yaga',\n  'Baba_Roga',\n]\n\nasync function getMons(_library, _account) {\n  const contr = new Contract(CONTRACT_ADDRESS, contrInterface, _library.getSigner(_account))\n  const totalMons = parseInt(await contr.totalMons())\n  return Promise.all([...Array(totalMons).keys()].map((id) => contr.mons(id)))\n}\n\nasync function approve(_library, _account, _amount) {\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\n  const newAmount = `${parseEther(_amount)}`\n  return await erc20Contr.approve(CONTRACT_ADDRESS, newAmount)\n}\n\nfunction Account() {\n  const { account } = useWeb3React()\n  return (\n    <span>\n      {account === null ? '-' : account ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}` : ''}\n    </span>\n  )\n}\n\nasync function getTokenBalance(_library, _account) {\n  if (!_library || !_account) {\n    return\n  }\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\n  const bal = await erc20Contr.balanceOf(_account)\n  return formatEther(BigNumber.from(bal?._hex).toBigInt())\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (error instanceof UserRejectedRequestErrorInjected) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction App() {\n  const [cryptomons, setCryptomons] = useState([])\n  const [myCryptomons, setMyCryptomons] = useState([])\n  const [otherCryptomons, setOtherCryptomons] = useState([])\n  const [value, setValue] = useState(0) // Used in My Cryptomons tab for input in price text\n  // Used in breeding tab\n  const [breedChoice1, setBreedChoice1] = useState(null)\n  const [breedChoice2, setBreedChoice2] = useState(null)\n  // Used in fighting tab\n  const [fightChoice1, setFightChoice1] = useState(null)\n  const [fightChoice2, setFightChoice2] = useState(null)\n  const [winner, setWinner] = useState(null) // Used to display winner of the last fight\n  const [rounds, setRounds] = useState(null) // Used to display number of rounds the fight lasted\n  const [shareId, setShareId] = useState('') // Used in shareId form input field\n  const [shareAddress, setShareAddress] = useState('') // Used in shareAddress form input field\n  const [tokenBalance, setTokenBalance] = useState('0')\n  const [fightTxDone, setFightTxDone] = useState(false)\n  const [rewards, setRewards] = useState(0)\n  const [healingPotions, setHealingPotions] = useState(null)\n  const [manaPotions, setManaPotions] = useState(null)\n  const [magicPotions, setMagicPotions] = useState(null)\n  const [swords, setSwords] = useState(null)\n  const [shields, setShields] = useState(null)\n  const [disableFightBtn, setDisableFightBtn] = useState(false)\n  const [buyItemAmount, setBuyItemAmount] = useState('0')\n  const [burnAmount, setBurnAmount] = useState('0')\n  const [disableBuyItemBtn, setDisableBuyItem] = useState(false)\n  const [isShareLoading, setIsShareLoading] = useState(false)\n  const [isStopSharingLoading, setIsStopSharingLoading] = useState(false)\n  const [isBreedMonLoading, setIsBreedMonLoading] = useState(false)\n  const [isBuyMonLoading, setIsBuyMonLoading] = useState(false)\n  const [isAddForSaleLoading, setIsAddForSaleLoading] = useState(false)\n  const [isRemoveFromSaleLoading, setIsRemoveFromSaleLoading] = useState(false)\n  const context = useWeb3React<Web3Provider>()\n  const { connector, account, library, activate, deactivate, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState<any>()\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n\n    refreshMons()\n  }, [activatingConnector, connector])\n\n  // Get token balance of user\n  useEffect(() => {\n    console.log(library);\n    \n    let mounted = true\n\n    getTokenBalance(library, account).then((res) => {\n      if (mounted) {\n        setTokenBalance(res)\n        refreshMons()\n      }\n    })\n\n    return () => {\n      mounted = false\n    }\n  }, [account, library, disableBuyItemBtn, disableFightBtn])\n\n  // Get contract events\n  useEffect(() => {\n    if (!library || !account) {\n      return\n    }\n\n    let mounted = true\n\n    ;(async function fightResults() {\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n\n      contr.on('FightResults', (_winnerId, _round) => {\n        if (mounted) {\n          const winId = BigNumber.from(_winnerId._hex).toNumber()\n          const round = BigNumber.from(_round._hex).toNumber()\n          setWinner(winId)\n          setRounds(round)\n          refreshMons()\n          setDisableFightBtn(false)\n        }\n      })\n\n      contr.on('Rewards', (_winnerId, _rewards) => {\n        if (mounted) {\n          const rewards = BigNumber.from(_rewards._hex).toNumber()\n          setRewards(rewards)\n          refreshMons()\n          setDisableFightBtn(false)\n        }\n      })\n    })()\n\n    return () => {\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n      contr.off('FightResults', (_winnerId, _round) => {\n        setDisableFightBtn(false)\n      })\n      contr.off('Rewards', (_winnerId, _round) => {\n        setDisableFightBtn(false)\n      })\n\n      mounted = false\n    }\n  }, [account, library, fightTxDone])\n\n  // Get items from nft contract\n  useEffect(() => {\n    if (!library || !account) {\n      return\n    }\n\n    let mounted = true\n\n    ;(async function () {\n      if (mounted) {\n        const nftContr = new Contract(ERC1155_CONTRACT_ADDRESS, nftInterface, library.getSigner(account))\n        const healpot = await nftContr.balanceOf(account, 0)\n        const manapot = await nftContr.balanceOf(account, 1)\n        const magicpot = await nftContr.balanceOf(account, 2)\n        const _swords = await nftContr.balanceOf(account, 3)\n        const _shields = await nftContr.balanceOf(account, 4)\n\n        setHealingPotions(BigNumber.from(healpot._hex).toBigInt())\n        setManaPotions(BigNumber.from(manapot._hex).toBigInt())\n        setMagicPotions(BigNumber.from(magicpot._hex).toBigInt())\n        setSwords(BigNumber.from(_swords._hex).toBigInt())\n        setShields(BigNumber.from(_shields._hex).toBigInt())\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [library, account, disableBuyItemBtn])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  // Change the list of created Crypromons saved in the state so UI refreshes after this call\n  async function refreshMons() {\n    if (!library || !account) return\n    await getMons(library, account)\n      .then((_mons) => {\n        // map result\n        const monsMap = _mons.map((mon) => ({\n          atk: mon.atk,\n          def: mon.def,\n          evolve: mon.evolve,\n          forSale: mon.forSale,\n          hp: mon.hp,\n          id: BigNumber.from(mon.id._hex).toNumber(),\n          monType: mon.monType,\n          owner: mon.owner,\n          price: BigNumber.from(mon.price._hex).toBigInt(),\n          sharedTo: mon.sharedTo,\n          species: mon.species,\n          speed: mon.speed,\n        }))\n        setCryptomons(monsMap)\n        setMyCryptomons(monsMap.filter((mon) => mon.owner === account))\n        setOtherCryptomons(monsMap.filter((mon) => mon.owner !== account))\n      })\n      .catch((err) => toast.error(err))\n  }\n\n  // Function that buys a Cryptomon through a smart contract function\n  async function buyMon(id, price) {\n    setIsBuyMonLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const newprice = `${BigInt(price)}`\n    let overrides = {\n      value: newprice,\n      gasLimit: 120000,\n    }\n\n    const tx = await contr.buyMon(id, overrides).catch((err) => setIsBuyMonLoading(false))\n    const recpt = await tx?.wait()\n    txSuccess(recpt, toast, refreshMons, (loadVal: boolean) => setIsBuyMonLoading(loadVal))\n    txFail(recpt, toast, (loadVal: boolean) => setIsBuyMonLoading(loadVal))\n  }\n\n  // Function that adds a Cryptomon for sale through a smart contract function\n  async function addForSale(id, price) {\n    setIsAddForSaleLoading(true)\n    if (price === 0 || price === '0') {\n      toast.error('🦄 Price is 0')\n      return\n    }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const tx = await contr.addForSale(id, parseEther(price), overrides).catch((err) => setIsAddForSaleLoading(false))\n    const receipt = await tx?.wait()\n    if (receipt && receipt.status === 1) {\n      toast.success(`Success, Tx hash: ${receipt.transactionHash}`)\n      refreshMons()\n      setIsAddForSaleLoading(false)\n    }\n    if (receipt && receipt.status === 0) {\n      toast.error(`Error, Tx hash: ${receipt.transactionHash}`)\n      setIsAddForSaleLoading(false)\n    }\n  }\n\n  // Function that removes a Cryptomon from sale through a smart contract function\n  async function removeFromSale(id: number) {\n    setIsRemoveFromSaleLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.removeFromSale(id, overrides).catch((err) => setIsRemoveFromSaleLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status === 1) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsRemoveFromSaleLoading(false)\n    }\n    if (recpt && recpt.status === 0) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsRemoveFromSaleLoading(false)\n    }\n  }\n\n  // Function that breeds 2 Cryptomons through a smart contract function\n  async function breedMons(id1, id2) {\n    setIsBreedMonLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const tx = await contr.breedMons(id1, id2).catch((err) => setIsBreedMonLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      setIsBreedMonLoading(false)\n    }\n\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsBreedMonLoading(false)\n    }\n\n    await refreshMons()\n  }\n\n  // Function that allows 2 Cryptomons to fight through a smart contract function\n  async function fight(id1, id2) {\n    setDisableFightBtn(true)\n    if (id1 === null || id2 === null) {\n      return\n    }\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    try {\n      const tx = await contr.fight(id1, id2, overrides).catch((err) => setDisableFightBtn(false))\n      const recpt = await tx?.wait()\n      if (recpt && recpt.status) {\n        setFightTxDone(true)\n      }\n\n      if (recpt && !recpt.status) {\n        toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n        setFightTxDone(false)\n      }\n    } catch (error) {\n      toast.error(`Fight function error: ${error.data?.message || ''}`)\n      setDisableFightBtn(false)\n    }\n  }\n\n  // Function that starts sharing a Cryptomon to another address through a smart contract function\n  async function startSharing(id, address) {\n    setIsShareLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.startSharing(id, address, overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  }\n\n  // Function that stops sharing a Cryptomon with other addresses through a smart contrct function\n  async function stopSharing(id) {\n    setIsStopSharingLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.stopSharing(id, overrides).catch((err) => setIsStopSharingLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsStopSharingLoading(false)\n    }\n\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsStopSharingLoading(false)\n    }\n  }\n\n  // Handlers for form inputs\n  function handleShareId(event) {\n    setShareId(event.target?.value)\n  }\n  function handleShareAddress(event) {\n    setShareAddress(event.target?.value)\n  }\n\n  function handleChange(event) {\n    setValue(event.target?.value)\n  }\n\n  function handleBuyItemAmount(event) {\n    setBuyItemAmount(event.target?.value)\n  }\n  function handleBurn(event) {\n    setBurnAmount(event.target?.value)\n  }\n\n  async function buyItem(units: string, price: string, itemNumber: string, data: string = '0x00') {\n    setDisableBuyItem(true)\n    if (!units || !price || !itemNumber) {\n      return\n    }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _price = parseEther(price)\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    approve(library, account, priceInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.buyItem(units, priceInWei, itemNumber, data, overrides)\n          const recpt = await tx?.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function burn(amount: string) {\n    setDisableBuyItem(true)\n    if (!amount) {\n      return\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    let overrides = {\n      gasLimit: 120000,\n    }\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.burn(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  // Components\n  // div that holds the name and id of each Cryptomon\n  const nameDiv = (mon) => {\n    return (\n      <div>\n        <label className=\"monName\">{names[mon?.species]}</label>\n        <label className=\"\" style={{ float: 'right' }}>\n          {'#' + mon?.id}\n        </label>\n      </div>\n    )\n  }\n\n  // Function that  returns the style of the background image according to Cryptomons' type\n  const bgStyle = (Type) => ({\n    backgroundImage: 'url(' + bg[Type] + ')',\n    backgroundSize: '210px 240px',\n  })\n\n  // div that holds the images (Cryptomon image and background image) of a Cryptomon\n  const imgDiv = (mon) => {\n    return (\n      <div className=\"monBox\" style={bgStyle(mon?.monType)}>\n        <img className=\"monImg\" src={MonImages[`${parseInt(mon?.species) + 1}`]} alt={mon?.species} />\n      </div>\n    )\n  }\n\n  // div that holds the stats of a Cryptomon\n  const statDiv = (mon) => {\n    return (\n      <div className=\"stat-area\">\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Hp: </label>\n          <StatBar percentage={(mon?.hp * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Attack: </label>\n          <StatBar percentage={(mon?.atk * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Defense: </label>\n          <StatBar percentage={(mon?.def * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Speed: </label>\n          <StatBar percentage={(mon?.speed * 100) / 140} />\n        </div>\n      </div>\n    )\n  }\n\n  // Create the div with add for sale button\n  const addForSaleDiv = (mon, value) => {\n    return (\n      <div className=\"selling-div\">\n        <label className=\"add-for-sale-label\">Set lokimons price:</label>\n        <input type=\"number\" className=\"add-for-sale-input\" value={value} onChange={(e) => handleChange(mon?.id, e)} />\n        {isAddForSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => addForSale(mon?.id, value)}\n          >\n            Add for sale\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with remove from sale button\n  const removeFromSaleDiv = (mon) => {\n    return (\n      <div className=\"selling-div\">\n        <label className=\"remove-from-sale-label\">\n          Price:\n          <br />\n          {formatUnits(mon?.price)}\n        </label>\n        {isRemoveFromSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => removeFromSale(mon?.id)}\n          >\n            Remove from sale\n            {isRemoveFromSaleLoading && <Spinner color=\"#000\" />}\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with buy button\n  const buyDiv = (mon) => {\n    return (\n      <div className=\"buying-div\">\n        <div className=\"sale-price\">\n          Price:\n          <br />\n          {formatUnits(mon?.price, 18)}\n        </div>\n        <div className=\"sale-owner\">Creature Owner: {mon?.owner} </div>\n        {isBuyMonLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"sale-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => buyMon(mon?.id, mon?.price)}\n          >\n            Buy\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with breed choice 1, choice 2 buttons\n  const breedDiv = (mon) => {\n    return (\n      <div className=\"breed-choice-div\">\n        <button\n          className=\"br-Choice-btn rpgui-button\"\n          type=\"button\"\n          style={{ float: 'right' }}\n          onClick={() => {\n            setBreedChoice1(mon?.id)\n          }}\n        >\n          Choice 1\n        </button>\n        <button\n          className=\"br-Choice-btn rpgui-button\"\n          type=\"button\"\n          style={{ float: 'right' }}\n          onClick={() => {\n            setBreedChoice2(mon?.id)\n          }}\n        >\n          Choice 2\n        </button>\n      </div>\n    )\n  }\n\n  const breedOption = (breedchoice) => {\n    if (breedchoice === null) {\n      return (\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            <figcaption>\n              <div className=\"monBox\">\n                {' '}\n                <img className=\"monImg\" src={MonImages['0']} alt={'empty'} />\n              </div>\n            </figcaption>\n          </figure>\n        </div>\n      )\n    } else {\n      return cryptomons\n        .filter((mon) => mon.id === breedchoice)\n        .map((mon) => (\n          <React.Fragment key={mon.id}>\n            <div className=\"mon\">\n              <figure className=\"my-figure\">\n                {imgDiv(mon)}\n                <figcaption></figcaption>\n              </figure>\n            </div>\n          </React.Fragment>\n        ))\n    }\n  }\n\n  // div with users Cryptomons\n  const myCryptomonsDiv = myCryptomons\n    .filter((mon) => !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {addForSaleDiv(mon, value)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's Cryptomons that are for sale\n  const forSaleCryptomons = myCryptomons\n    .filter((mon) => mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {removeFromSaleDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with Cryptomons available for buy to the user\n  const buyCryptomons = otherCryptomons\n    .filter((mon) => mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {buyDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's Cryptomons that can be used for breeding\n  const forBreedCryptomons = myCryptomons\n    .filter((mon) => !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {breedDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  const cond = (mon) =>\n    (mon.owner.toString().toLowerCase() === account?.toString()?.toLowerCase() && !mon.forSale) ||\n    (mon.sharedTo.toString().toLowerCase() === account?.toString()?.toLowerCase() &&\n      mon.owner.toString().toLowerCase() !== account?.toString()?.toLowerCase())\n\n  // div with user's Cryptomons that can be used to fight with\n  const forFightWithCryptomons = myCryptomons.filter(cond).map((mon) => (\n    <React.Fragment key={mon.id}>\n      <div className=\"mon\">\n        <figure className=\"my-figure\">\n          {nameDiv(mon)}\n          {imgDiv(mon)}\n          <figcaption>{statDiv(mon)}</figcaption>\n        </figure>\n        <div className=\"fight-choice-div\">\n          <button\n            className=\"fight-Choice-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => {\n              setFightChoice1(mon.id)\n            }}\n          >\n            Choice 1\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  ))\n\n  // div with Cryptomons that user can fight against\n  const forFightAgainstCryptomons = otherCryptomons\n    .filter((mon) => !mon.forSale && mon.sharedTo.toLowerCase() !== account?.toString().toLowerCase())\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"fight-choice-div\">\n            <button\n              className=\"fight-Choice-btn rpgui-button\"\n              type=\"button\"\n              style={{ float: 'right' }}\n              onClick={() => {\n                setFightChoice2(mon.id)\n              }}\n            >\n              Choice 2\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's shared Cryptomons\n  const sharedByMe = myCryptomons\n    .filter((mon) => mon.sharedTo.toLowerCase() !== account?.toString().toLocaleLowerCase() && !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"sharing-div\">\n            <div className=\"shareTo-owner\">Shared to address: {mon.sharedTo} </div>\n            {isStopSharingLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"stop-sharing-btn rpgui-button\"\n                type=\"button\"\n                style={{ float: 'right' }}\n                onClick={() => stopSharing(mon.id)}\n              >\n                Stop sharing\n              </button>\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with Cryptomons shared to the user\n  const sharedToMe = otherCryptomons\n    .filter((mon) => mon.sharedTo === account)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"sharing-div\">\n            <label className=\"shared-owner\">Creature Owner: {mon.owner} </label>\n            {isStopSharingLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"stop-sharing-btn rpgui-button\"\n                type=\"button\"\n                style={{ float: 'right' }}\n                onClick={() => stopSharing(mon.id)}\n              >\n                Stop sharing\n              </button>\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // Function that does all the rendering of the application\n  return (\n    // Creation of the different tabs of the UI\n    <div className=\"rpgui-content\">\n      <ToastContainer />\n      <Router>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand as=\"li\">\n          <img alt=\"\" src={MonImages['favicon32x32']} width=\"30\" height=\"30\" className=\"d-inline-block\" /> \n          <Link to='/' className='LokiMons'>Lokian Monsters</Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto lokimons-nav\">\n          <Nav.Link as=\"li\"><Link to='/myLokiMons'>My LokiMons</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/myShop'>My Shop</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/dojo'>Dojo</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/arena'>Arena</Link></Nav.Link>\n          <Nav.Link as=\"li\"><Link to='/breed'>Breed</Link></Nav.Link>\n                 <Nav.Link as=\"li\"><Link to='/marketplace'>Marketplace</Link></Nav.Link>\n                 <Nav.Link as=\"li\"><Link to='/share'>Share</Link></Nav.Link>\n              <Nav.Link as=\"li\"><Link to='/sharedToMe'>Shared To Me</Link></Nav.Link>\n              <Nav.Link as=\"li\"><Link to='/token'>Token</Link></Nav.Link>\n            <Nav.Link as=\"li\">\n              {!!error && <h4>{getErrorMessage(error)}</h4>}\n            </Nav.Link>\n          </Nav>\n          <Nav className=\"lokimons-nav-wallet\">\n            {/* wallet info */}\n            {Object.keys(connectorsByName).map((name, idx) => {\n              const currentConnector = connectorsByName[name]\n              const activating = currentConnector === activatingConnector\n              const connected = currentConnector === connector\n              const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n              return (\n                <Nav.Link key={name + idx} as=\"li\">\n                  <button\n                    className=\"rpgui-button golden\"\n                    type=\"button\"\n                    style={{\n                      fontSize: '20px',\n                      paddingTop: '14px',\n                      width: '350px',\n                    }}\n                    onClick={() => {\n                      setActivatingConnector(currentConnector)\n                      activate(currentConnector)\n                    }}\n                    disabled={disabled}\n                    key={name}\n                  >\n                    {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}\n                    <Account />\n                    <span>{!account ? 'Connect Wallet' : ''}</span>\n                  </button>\n                </Nav.Link>\n              )\n            })}\n            {/* wallet logout */}\n            <Nav.Link as=\"li\">\n              {(active || error) && (\n                <button\n                  className=\"rpgui-button\"\n                  onClick={() => {\n                    deactivate()\n                    setCryptomons([])\n                    setMyCryptomons([])\n                    setOtherCryptomons([])\n                    setWinner(null)\n                    setRounds(null)\n                    setValue(0)\n                  }}\n                >\n                  Logout\n                </button>\n              )}\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Routes>\n      <Route path=\"/\" element={<MyLokiMons myCryptomons={myCryptomons} value={value} onHandleChange={(e) => handleChange(e)} isAddForSaleLoading={isAddForSaleLoading} addForSale={addForSale}/>} />        \n          <Route path=\"/myLokiMons\" element={<MyLokiMons myCryptomons={myCryptomons} value={value} onHandleChange={(e) => handleChange(e)} isAddForSaleLoading={isAddForSaleLoading} addForSale={addForSale}/>} />        \n          <Route path=\"/myShop\" element={<MyShop myCryptomons={myCryptomons} isRemoveFromSaleLoading={isRemoveFromSaleLoading} removeFromSale={removeFromSale} nativeTok={library?._network?.name} />} />\n          <Route path=\"/marketplace\" element={<Marketplace otherCryptomons={otherCryptomons} isBuyMonLoading={isBuyMonLoading} buyMon={buyMon} nativeTok={library?._network?.name} />} />\n          <Route path=\"/breed\"  element={<Breed myCryptomons={myCryptomons} isBreedMonLoading={isBreedMonLoading} breedMons={breedMons} setBreedChoice1Func={setBreedChoice1} setBreedChoice2Func={setBreedChoice2} breedChoice1={breedChoice1} breedChoice2={breedChoice2} />} />\n          <Route path=\"/dojo\" element={<Dojo myCryptomons={myCryptomons} account={account} setFightChoice1Func={setFightChoice1} setFightChoice2Func={setFightChoice2} otherCryptomons={otherCryptomons} cryptomons={cryptomons} fightChoice1={fightChoice1} fightChoice2={fightChoice2} winner={winner} monNames={names} fightTxDone={fightTxDone} rewards={rewards} rounds={rounds} disableFightBtn={disableFightBtn} fight={fight} />} />\n          <Route path=\"/arena\" element={<ArenaV2 />} />\n          <Route path=\"/share\" element={<Share myCryptomons={myCryptomons} shareId={shareId} onHandleShareAddress={handleShareAddress} onHandleShareId={handleShareId} shareAddress={shareAddress} \n            isShareLoading={isShareLoading} startSharingFunc={startSharing} account={account} isStopSharingLoading={isStopSharingLoading} stopSharingFunc={stopSharing}\n          />} />\n          <Route path=\"/sharedToMe\" element={<SharedToMe otherCryptomons={otherCryptomons} account={account} isStopSharingLoading={isStopSharingLoading} stopSharingFunc={stopSharing} />} />\n          <Route path=\"/token\" element={<Token \n            tokenBalance={tokenBalance} swords={swords} shields={shields} healingPotions={healingPotions} manaPotions={manaPotions} magicPotions={magicPotions}\n            buyItemAmount={buyItemAmount} onHandleBuyItemAmount={handleBuyItemAmount} buyItemFunc={buyItem} disableBuyItemBtn={disableBuyItemBtn} burnAmount={burnAmount} burnFunc={burn} onHandleBurn={handleBurn}\n          />} />\n        </Routes>\n      </Router>\n      <Tabs defaultActiveKey=\"myCryptomons\" id=\"uncontrolled-tab-example\">\n        {/* <Tab className=\"x\" eventKey=\"myCryptomons\" title=\"My LokiMons\">\n          <div className=\"p1 green-glow\">My LokiMons</div>\n          {myCryptomonsDiv}\n        </Tab> */}\n        {/* <Tab eventKey=\"forSale\" title=\"My Shop\">\n          <div className=\"p1 green-glow\">My Shop</div>\n          {forSaleCryptomons}\n        </Tab>\n        <Tab eventKey=\"buyCryptomons\" title=\"Marketplace\">\n          <div className=\"p1 green-glow\">Marketplace</div>\n          {buyCryptomons}\n        </Tab> */}\n        {/* <Tab eventKey=\"breedCryptomons\" title=\"Breed\">\n          <div className=\"p1 green-glow\">Breed</div>\n          <div className=\"breeding-area\">\n            {breedOption(breedChoice1)}\n            {breedOption(breedChoice2)}\n            {isBreedMonLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"rpgui-button\"\n                type=\"button\"\n                style={{ width: '420px' }}\n                onClick={() => breedMons(breedChoice1, breedChoice2)}\n              >\n                Breed choosen lokimons\n              </button>\n            )}\n          </div>\n          <br />\n          {forBreedCryptomons}\n        </Tab> */}\n        {/* <Tab eventKey=\"fight\" title=\"Arena\">\n          <div className=\"p1 green-glow\">V S</div>\n          <div className=\"fighting-area\">\n            {breedOption(fightChoice1)}\n            {breedOption(fightChoice2)}\n\n            <label className=\"winner-label\">\n              And the winner is...{' '}\n              {fightTxDone ? names[cryptomons.find((mon) => mon.id?.toString() === winner?.toString())?.species] : ''}\n              {!winner || winner == 12345678911 ? 'still unknown' : ''}\n              {winner == 12345678910 ? \"no one, it's a tie\" : ''}\n            </label>\n\n            {fightTxDone && winner !== 12345678910 ? (\n              <>\n                <br />\n                <label className=\"winner-label\">Winning creature's Id: {winner}</label>\n                <br />\n                <label className=\"winner-label\">Rounds the fight lasted: {rounds}</label>\n                <br />\n\n                {!fightTxDone && rewards === 0 && !winner ? (\n                  ''\n                ) : (\n                  <label className=\"winner-label\">{rewards === 0 ? '' : `You have won ${rewards} LOKs!`}</label>\n                )}\n              </>\n            ) : (\n              ''\n            )}\n\n            {disableFightBtn ? (\n              <Spinner color=\"gray\" style={{ marginLeft: '50%', marginRight: 'auto', padding: '8px' }} />\n            ) : (\n              <button\n                id=\"fight-btn\"\n                className=\"rpgui-button\"\n                type=\"button\"\n                onClick={() => {\n                  setWinner(null)\n                  setRounds(null)\n                  setFightTxDone(false)\n                  setRewards(0)\n                  fight(fightChoice1, fightChoice2)\n                }}\n                disabled={disableFightBtn}\n              >\n                Fight with choosen lokimons\n              </button>\n            )}\n          </div>\n          <div className=\"fight-mons-area\">\n            <div className=\"fightWith-area\">\n              <div className=\"p2\">Your LokiMons</div>\n              {forFightWithCryptomons}\n            </div>\n            <div className=\"fightAgainst-area\">\n              <div className=\"p2\">Opponent LokiMons</div>\n              {forFightAgainstCryptomons}\n            </div>\n          </div>\n        </Tab> */}\n        {/* <Tab eventKey=\"arenav2\" title=\"ArenaV2\">\n          <ArenaV2 />\n        </Tab> */}\n        {/* <Tab eventKey=\"share\" title=\"Share\">\n          <div className=\"p1 green-glow\">Sharing Management</div>\n          <div className=\"sharing-area\">\n            <div className=\"form-line\">\n              <label className=\"form-label\">Creature Id:</label>\n              <input className=\"form-input\" value={shareId} onChange={(e) => handleShareId(e)} />\n            </div>\n            <div className=\"form-line\">\n              <label className=\"form-label\">Share to address:</label>\n              <input className=\"form-input\" value={shareAddress} onChange={(e) => handleShareAddress(e)} />\n            </div>\n            <div className=\"form-line\">\n              {isShareLoading ? (\n                <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                  <Spinner color=\"#000\" />\n                </button>\n              ) : (\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => startSharing(shareId, shareAddress)}\n                >\n                  Share\n                </button>\n              )}\n            </div>\n          </div>\n          {sharedByMe}\n        </Tab> */}\n        {/* <Tab eventKey=\"sharedToMe\" title=\"Shared To Me\">\n          <div className=\"p1 green-glow\">Shared To You</div>\n          {sharedToMe}\n        </Tab>\n        <Tab eventKey=\"token\" title=\"Token\">\n          <div className=\"p1 green-glow\">Your tokens</div>\n\n          <div className=\"p1\" style={{ padding: '12px' }}>\n            {tokenBalance} Lokians\n          </div>\n          <br />\n          <br />\n          <div className=\"p1 green-glow\">\n            Your items\n            <div style={{ marginLeft: '45%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div className=\"column\">\n                  {!swords ? <div className=\"rpgui-icon weapon-slot\"></div> : <div className=\"rpgui-icon sword\"></div>}\n                  {!shields ? (\n                    <div className=\"rpgui-icon shield-slot\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon shield\"></div>\n                  )}\n                  {healingPotions || manaPotions || magicPotions ? (\n                    <div className=\"rpgui-icon potion-red\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon potion-slot\"></div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <br />\n            <div style={{ marginLeft: '40%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p>\n                  <p>You have {`${healingPotions}`} healing potions!</p>\n                  <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            <div className=\"p1\">Buy somethin (NFT)</div>\n            <div className=\"p1\">note: if transaction fails, set gas fees above 100k</div>\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon sword\"></div> A Sword (500 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '500', '3')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon shield\"></div> A Shield (500 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '500', '4')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '50', '0')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-blue\"></div> A Mana Potion (50 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '50', '1')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-green\"></div> A Magic Potion (50 Loks)\n              </span>\n              <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '50', '2')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            <div className=\"p1\">Give to the skeleton people (burn token)</div>\n            <div className=\"p1\">note: if transaction fails, set gas fees above 100k</div>\n            <div className=\"skellies\">\n              <img className=\"monImg\" src={MonImages['skelly']} alt=\"skeleton-people-1\" />\n              <img className=\"monImg\" src={MonImages['skelly2']} alt=\"skeleton-people-1\" />\n              <img className=\"monImg\" src={MonImages['skellyrip']} alt=\"skeleton-people-1\" />\n            </div>\n            <div className=\"sharing-area\">\n              <div className=\"form-line with-burn\">\n                <label className=\"form-label\">Amount</label>\n                <input className=\"form-input\" placeholder=\"0\" value={burnAmount} onChange={(e) => handleBurn(e)} />\n              </div>\n              <div className=\"form-line with-burn\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => burn(burnAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                  Give\n                </button>\n              </div>\n            </div>\n          </div>\n        </Tab> */}\n      </Tabs>\n    </div>\n  )\n}\n\nexport default App\n","E:\\lokimons\\Lokian.eth\\src\\utils\\txSuccess.js",[],["260","261"],"E:\\lokimons\\Lokian.eth\\src\\utils\\txFail.js",[],"E:\\lokimons\\Lokian.eth\\src\\wallet\\connectors.ts",[],"E:\\lokimons\\Lokian.eth\\src\\wallet\\hooks.ts",["262"],"import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized: boolean) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, []) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n\n  export function useInactiveListener(suppress: boolean = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect((): any => {\n      const { ethereum } = window as any\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId: string | number) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts: string[]) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId: string | number) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }","E:\\lokimons\\Lokian.eth\\src\\StatBar.tsx",[],"E:\\lokimons\\Lokian.eth\\src\\components\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\components\\myLokiMons\\index.js",["263"],"import React, { useState, useEffect } from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport MonImages from '../../sprites-copy'\r\nimport { nameDiv, imgDiv, statDiv, addForSaleDiv, monName } from '../common'\r\nimport getMonsOrder from '../common/getMonsOrder'\r\nimport ListRender from '../common/listRender'\r\nimport Spinner from '../spinner'\r\nimport './mylokimons.css'\r\n\r\nconst MyLokiMons = ({ myCryptomons, value, onHandleChange, isAddForSaleLoading, addForSale }) => {\r\n  const [display, setDisplay] = useState('grid')\r\n  const [orderBy, setOrderBy] = useState(null)\r\n  const [myLokimons, setMyLokimons] = useState(myCryptomons)\r\n\r\n  useEffect(() => {\r\n    if (!myCryptomons) return\r\n    setMyLokimons(myCryptomons)\r\n  }, [myCryptomons])\r\n\r\n  useEffect(() => {\r\n    if (!orderBy) return\r\n    const _lokimons = getMonsOrder(orderBy, myLokimons)\r\n    setMyLokimons([..._lokimons])\r\n  }, [orderBy])\r\n\r\n  return (\r\n    <>\r\n      <ListRender\r\n        pageName={'My LokiMons'}\r\n        onSetDisplay={(value) => setDisplay(value)}\r\n        onSetOrder={(evtKey, e) => setOrderBy(evtKey)}\r\n      />\r\n\r\n      {display === 'grid' && (\r\n        <div className=\"mylokimons-container\">\r\n          {myLokimons &&\r\n            myLokimons\r\n              .filter((mon) => !mon.forSale)\r\n              .map((mon) => (\r\n                <React.Fragment key={mon.id}>\r\n                  <div className=\"mon\">\r\n                    <figure className=\"my-figure\">\r\n                      {nameDiv(mon)}\r\n                      {imgDiv(mon)}\r\n                      <figcaption>{statDiv(mon)}</figcaption>\r\n                    </figure>\r\n                    {addForSaleDiv(mon, value, onHandleChange, isAddForSaleLoading, addForSale)}\r\n                  </div>\r\n                </React.Fragment>\r\n              ))}\r\n        </div>\r\n      )}\r\n\r\n      {display === 'list' && (\r\n        <Table striped bordered hover variant=\"dark\" responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Img</th>\r\n              <th>Name</th>\r\n              <th>Stats</th>\r\n              <th>Price</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {myLokimons &&\r\n              myLokimons\r\n                .filter((mon) => !mon.forSale)\r\n                .map((mon) => (\r\n                  <tr key={mon.id}>\r\n                    <td>{mon?.id}</td>\r\n                    <td>\r\n                      {' '}\r\n                      <div style={{ border: '2px solid gray', padding: '3px', borderRadius: '4px' }}>\r\n                        <img\r\n                          className=\"\"\r\n                          src={MonImages[`${parseInt(mon?.species) + 1}`]}\r\n                          alt={mon?.species}\r\n                          height=\"45\"\r\n                          width=\"45\"\r\n                        />\r\n                      </div>\r\n                    </td>\r\n                    <td>{monName(mon?.species) || ''} </td>\r\n                    <td>{`HP ${mon?.hp}, ATK ${mon?.atk}, DEF ${mon?.def}, SPD ${mon?.speed}`}</td>\r\n                    <td>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"add-for-sale-input\"\r\n                        value={value}\r\n                        onChange={(e) => onHandleChange(mon?.id, e)}\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        className=\"rpgui-button\"\r\n                        type=\"button\"\r\n                        onClick={() => (mon?.id ? addForSale(mon?.id, value) : null)}\r\n                      >\r\n                        {isAddForSaleLoading ? <Spinner color=\"#000\" /> : 'Sell'}\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyLokiMons\r\n","E:\\lokimons\\Lokian.eth\\src\\components\\share\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\components\\spinner\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\components\\sharedToMe\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\components\\token\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\sprites\\index.js",[],["264","265"],"E:\\lokimons\\Lokian.eth\\src\\components\\token\\nftItem.js",["266","267","268"],"import React from 'react'\r\nimport { Row } from 'react-bootstrap'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatUnits, parseEther, formatEther } from '@ethersproject/units'\r\nimport './token.css'\r\n\r\nconst NftItem = ({ item, icon, slot }) => {\r\n  const nftItem = BigNumber.from(item).toBigInt()\r\n  return (\r\n    <>\r\n      <Row>\r\n        <div className=\"nft-item\">\r\n          <div className={`rpgui-icon ${nftItem ? icon : slot}`}></div>\r\n          <span>X</span>\r\n          <span className=\"nft-item-count\">{`${nftItem}`}</span>\r\n        </div>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NftItem\r\n","E:\\lokimons\\Lokian.eth\\src\\components\\dojo\\index.tsx",["269","270","271"],"import React, { useEffect, useState } from 'react'\r\nimport { Container, Row, Col, Table } from 'react-bootstrap'\r\nimport { breedOption } from '../common'\r\nimport Spinner from '../spinner'\r\nimport './dojo.css'\r\nimport MySparringMons from './mySparringMons'\r\n\r\ninterface Params {\r\n  fightChoice1: string\r\n  fightChoice2: string\r\n  cryptomons: any[]\r\n  winner: number\r\n  monNames: string[]\r\n  fightTxDone: boolean\r\n  rewards: number\r\n  rounds: number\r\n  disableFightBtn: boolean\r\n  fight: (fightChoice1: string, fightChoice2: string) => void\r\n  account: string\r\n  myCryptomons: any[]\r\n  otherCryptomons: any[]\r\n  setFightChoice1Func: any\r\n  setFightChoice2Func: any\r\n}\r\n\r\nconst Dojo = (params: Params) => {\r\n  const [matchWinner, setMatchWinner] = useState('')\r\n  const [winnerID, setWinnerID] = useState('')\r\n  const [matches, setMatches] = useState(0)\r\n  const [rewardAmount, setRewardAmount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    if (!params.fightTxDone) return\r\n    if (!params.winner || !params.cryptomons || !params.monNames) return\r\n\r\n    const tie = params.winner == 12345678911 || params.winner == 12345678910\r\n    const winnerMon = params.cryptomons.find((mon) => mon.id === params.winner)\r\n\r\n    if (tie) {\r\n      setMatchWinner('Tie')\r\n    } else {\r\n      setMatchWinner(params.monNames[winnerMon.species] ?? 'Tie')\r\n      setWinnerID(params.winner.toString())\r\n      setMatches(params.rounds)\r\n      if (params.rewards) setRewardAmount(params.rewards)\r\n    }\r\n  }, [params, params.fightTxDone])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p1A green-glow\">Dojo</div>\r\n\r\n      <div className=\"rpgui-container framed-grey vs-container\" style={{ marginTop: '24px' }}>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col xs=\"12\" lg=\"12\" className=\"col-text-center\">\r\n              <span>\r\n                {\r\n                  params.monNames[\r\n                    params.cryptomons.find((mon) => mon.id?.toString() === params.fightChoice1?.toString())?.species\r\n                  ]\r\n                }{' '}\r\n                {params.fightChoice1 ? `no.${params.fightChoice1}` : params.fightChoice1 == '0' ? `no.${0}` : ''}\r\n              </span>\r\n            </Col>\r\n            <Col xs md=\"12\" className=\"col-text-center\">\r\n              VS\r\n            </Col>\r\n            <Col xs=\"12\" lg=\"12\" className=\"col-text-center\">\r\n              <span>\r\n                {\r\n                  params.monNames[\r\n                    params.cryptomons.find((mon) => mon.id?.toString() === params.fightChoice2?.toString())?.species\r\n                  ]\r\n                }{' '}\r\n                {params.fightChoice2 ? `no.${params.fightChoice2}` : ''}\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <div className=\"fighting-area\" style={{ marginTop: '9px' }}>\r\n        <div>\r\n        {breedOption(parseInt(params.fightChoice1), params.cryptomons)}\r\n        {breedOption(parseInt(params.fightChoice2), params.cryptomons)}\r\n        </div>\r\n\r\n            <div>\r\n            <Table striped bordered hover variant=\"dark\" responsive style={{ marginTop: '8px' }}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Winner</th>\r\n                    <th>ID</th>\r\n                    <th>Rounds</th>\r\n                    <th>Rewards</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>{matchWinner}</td>\r\n                    <td>{winnerID}</td>\r\n                    <td>{matches}</td>\r\n                    <td>{rewardAmount}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n\r\n          <div style={{marginBottom:'12px'}}>\r\n          {params.disableFightBtn ? (\r\n              <Spinner color=\"gray\" style={{ marginLeft: '50%', marginRight: 'auto', padding: '8px' }} />\r\n            ) : (\r\n              <button\r\n                style={{ width: '100%' }}\r\n                id=\"fight-btn\"\r\n                className=\"rpgui-button\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setMatchWinner('')\r\n                  setWinnerID('')\r\n                  setMatches(0)\r\n                  setRewardAmount(0)\r\n                  params.fight(params.fightChoice1, params.fightChoice2)\r\n                }}\r\n                disabled={params.disableFightBtn}\r\n              >\r\n                Start sparring!\r\n              </button>\r\n            )}\r\n          </div>\r\n      </div>\r\n\r\n      {/* fight mons area, fight against area */}\r\n      <div className=\"rpgui-container framed-grey table-container\">\r\n        <Row>\r\n          <Col xs md={12}>\r\n            <div style={{ textAlign: 'center' }}>Select LokiMon</div>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs md={12}>\r\n            <div className=\"dojo-selection\">\r\n              <MySparringMons\r\n                mons={params.myCryptomons}\r\n                setFightChoiceFunc={params.setFightChoice1Func}\r\n                account={params.account}\r\n                choice=\"1\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n      <div className=\"rpgui-container framed-grey table-container\">\r\n        <Row>\r\n          <Col xs md={12}>\r\n            <div style={{ textAlign: 'center' }}>Select Opponent</div>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs md={12}>\r\n            <div className=\"dojo-selection\">\r\n              <MySparringMons\r\n                mons={params.otherCryptomons}\r\n                setFightChoiceFunc={params.setFightChoice2Func}\r\n                account={params.account}\r\n                choice=\"2\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dojo\r\n","E:\\lokimons\\Lokian.eth\\src\\components\\common\\index.tsx",[],"E:\\lokimons\\Lokian.eth\\src\\components\\breed\\index.tsx",[],"E:\\lokimons\\Lokian.eth\\src\\components\\dojo\\mySparringMons.tsx",[],"E:\\lokimons\\Lokian.eth\\src\\sprites-copy\\index.js",[],"E:\\lokimons\\Lokian.eth\\src\\components\\common\\listIcon.tsx",[],"E:\\lokimons\\Lokian.eth\\src\\components\\common\\gridIcon.tsx",[],"E:\\lokimons\\Lokian.eth\\src\\components\\common\\listRender.js",[],"E:\\lokimons\\Lokian.eth\\src\\components\\myShop\\index.tsx",["272"],"import React, { useState, useEffect } from 'react'\r\nimport { nameDiv, imgDiv, statDiv, removeFromSaleDiv, monName } from '../common'\r\nimport getMonsOrder from '../common/getMonsOrder'\r\nimport ListRender from '../common/listRender'\r\nimport { Lokimon } from '../models'\r\nimport { Table } from 'react-bootstrap'\r\nimport MonImages from '../../sprites-copy'\r\nimport Spinner from '../spinner'\r\nimport { formatUnits } from '@ethersproject/units'\r\n\r\nconst MyShop = ({ myCryptomons, isRemoveFromSaleLoading, removeFromSale, nativeTok = '' }) => {\r\n  const [display, setDisplay] = useState('grid')\r\n  const [orderBy, setOrderBy] = useState(null)\r\n  const [myLokimons, setMyLokimons] = useState(myCryptomons)\r\n\r\n  useEffect(() => {\r\n    if (!myCryptomons) return\r\n    setMyLokimons(myCryptomons)\r\n  }, [myCryptomons])\r\n\r\n  useEffect(() => {\r\n    if (!orderBy) return\r\n    const _lokimons = getMonsOrder(orderBy, myCryptomons)\r\n    setMyLokimons([..._lokimons])\r\n  }, [orderBy])\r\n\r\n  return (\r\n    <>\r\n      <ListRender\r\n        pageName={'My Shop'}\r\n        onSetDisplay={(value: string) => setDisplay(value)}\r\n        onSetOrder={(evtKey: string, e: any) => setOrderBy(evtKey)}\r\n      />\r\n\r\n      {display === 'grid' && (\r\n        <div className=\"mylokimons-container\">\r\n          {myCryptomons &&\r\n            myCryptomons\r\n              .filter((mon: Lokimon) => mon.forSale)\r\n              .map((mon: Lokimon) => (\r\n                <React.Fragment key={mon.id}>\r\n                  <div className=\"mon\">\r\n                    <figure className=\"my-figure\">\r\n                      {nameDiv(mon)}\r\n                      {imgDiv(mon)}\r\n                      <figcaption>{statDiv(mon)}</figcaption>\r\n                    </figure>\r\n                    {removeFromSaleDiv(mon, isRemoveFromSaleLoading, removeFromSale)}\r\n                  </div>\r\n                </React.Fragment>\r\n              ))}\r\n        </div>\r\n      )}\r\n\r\n      {display === 'list' && (\r\n        <Table striped bordered hover variant=\"dark\" responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Img</th>\r\n              <th>Name</th>\r\n              <th>Stats</th>\r\n              <th>Price</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {myLokimons &&\r\n              myLokimons\r\n                .filter((mon: Lokimon) => !mon.forSale)\r\n                .map((mon: Lokimon) => (\r\n                  <tr key={mon.id}>\r\n                    <td>{mon?.id}</td>\r\n                    <td>\r\n                      {' '}\r\n                      <div style={{ border: '2px solid gray', padding: '3px', borderRadius: '4px' }}>\r\n                        <img\r\n                          className=\"\"\r\n                          src={MonImages[`${mon.species + 1 || 0}`]}\r\n                          alt={mon?.species?.toString() || 'none'}\r\n                          height=\"45\"\r\n                          width=\"45\"\r\n                        />\r\n                      </div>\r\n                    </td>\r\n                    <td>{monName(mon?.species) || ''} </td>\r\n                    <td>{`HP ${mon?.hp}, ATK ${mon?.atk}, DEF ${mon?.def}, SPD ${mon?.speed}`}</td>\r\n                    <td>{`${formatUnits(mon?.price || 0)} ${nativeTok}`}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"rpgui-button\"\r\n                        type=\"button\"\r\n                        onClick={() => (mon?.id ? removeFromSale(mon?.id) : null)}\r\n                      >\r\n                        {isRemoveFromSaleLoading ? <Spinner color=\"#000\" /> : 'Delist'}\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyShop\r\n","E:\\lokimons\\Lokian.eth\\src\\components\\common\\getMonsOrder.ts",["273","274","275"],"import { formatUnits } from '@ethersproject/units'\r\nimport { monName } from '.'\r\nimport { Lokimon } from '../models'\r\n\r\nconst getMonsOrder = (_orderBy: string, _myLokimons: Lokimon[]) => {\r\n  if (!_orderBy) return\r\n\r\n  let lokimons = _myLokimons\r\n\r\n  switch (_orderBy) {\r\n    case 'nameAZ':\r\n      lokimons.sort((a, b) => {\r\n        const speciesA1 = monName(a.species).toLowerCase()\r\n        const speciesB1 = monName(b.species).toLowerCase()\r\n        if (speciesA1 == speciesB1) return 0\r\n        return speciesA1 < speciesB1 ? -1 : 1\r\n      })\r\n      break\r\n    case 'nameZA':\r\n      lokimons.sort((a, b) => {\r\n        const speciesA2 = monName(a.species).toLowerCase()\r\n        const speciesB2 = monName(b.species).toLowerCase()\r\n        if (speciesA2 == speciesB2) return 0\r\n        return speciesB2 < speciesA2 ? -1 : 1\r\n      })\r\n      break\r\n    case 'idDesc':\r\n      lokimons.sort((a, b) => b.id - a.id)\r\n      break\r\n    case 'idAsc':\r\n      lokimons.sort((a, b) => a.id - b.id)\r\n      break\r\n    case 'priceDesc':\r\n      lokimons.sort((a, b) => parseFloat(formatUnits(b.price, 18)) - parseFloat(formatUnits(a.price, 18)))\r\n      break\r\n    case 'priceAsc':\r\n      lokimons.sort((a, b) => parseFloat(formatUnits(a.price, 18)) - parseFloat(formatUnits(b.price, 18)))\r\n      break\r\n    default:\r\n      lokimons.sort((a, b) => {\r\n        const speciesA3 = monName(a.species).toLowerCase()\r\n        const speciesB3 = monName(b.species).toLowerCase()\r\n        if (speciesA3 == speciesB3) return 0\r\n        return speciesA3 < speciesB3 ? -1 : 1\r\n      })\r\n      break\r\n  }\r\n\r\n  return lokimons\r\n}\r\n\r\nexport default getMonsOrder\r\n","E:\\lokimons\\Lokian.eth\\src\\components\\marketplace\\index.tsx",["276"],"import { formatUnits } from '@ethersproject/units'\r\nimport React, { useState, useEffect } from 'react'\r\nimport MonImages from '../../sprites-copy'\r\nimport { nameDiv, imgDiv, statDiv, buyDiv, monName } from '../common'\r\nimport getMonsOrder from '../common/getMonsOrder'\r\nimport ListRender from '../common/listRender'\r\nimport { Lokimon } from '../models'\r\nimport Spinner from '../spinner'\r\nimport { Table } from 'react-bootstrap'\r\nimport './marketplace.css'\r\n\r\nconst Marketplace = ({ otherCryptomons, isBuyMonLoading, buyMon, nativeTok = '' }) => {\r\n  const [display, setDisplay] = useState('grid')\r\n  const [orderBy, setOrderBy] = useState(null)\r\n  const [otherLokimons, setOtherLokimons] = useState(otherCryptomons)\r\n\r\n  useEffect(() => {\r\n    if (!otherCryptomons) return\r\n    setOtherLokimons(otherCryptomons)\r\n  }, [otherCryptomons])\r\n\r\n  useEffect(() => {\r\n    if (!orderBy) return\r\n    const _otherLokimons = getMonsOrder(orderBy, otherCryptomons)\r\n    setOtherLokimons([..._otherLokimons])\r\n  }, [orderBy])\r\n\r\n  return (\r\n    <>\r\n      <ListRender\r\n        pageName={'Marketplace'}\r\n        onSetDisplay={(value: string) => setDisplay(value)}\r\n        onSetOrder={(evtKey: string, e: any) => setOrderBy(evtKey)}\r\n      />\r\n\r\n      {display === 'grid' && (\r\n        <div className=\"mylokimons-container\">\r\n          {otherLokimons &&\r\n            otherLokimons\r\n              .filter((mon: Lokimon) => mon.forSale)\r\n              .map((mon: Lokimon) => (\r\n                <React.Fragment key={mon.id}>\r\n                  <div className=\"mon\">\r\n                    <figure className=\"my-figure\">\r\n                      {nameDiv(mon)}\r\n                      {imgDiv(mon)}\r\n                      <figcaption>{statDiv(mon)}</figcaption>\r\n                    </figure>\r\n                    {buyDiv(mon, isBuyMonLoading, buyMon)}\r\n                  </div>\r\n                </React.Fragment>\r\n              ))}\r\n        </div>\r\n      )}\r\n\r\n      {display === 'list' && (\r\n        <Table striped bordered hover variant=\"dark\" responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Img</th>\r\n              <th>Name</th>\r\n              <th>Stats</th>\r\n              <th>Price</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {otherLokimons &&\r\n              otherLokimons\r\n                .filter((mon: Lokimon) => !mon.forSale)\r\n                .map((mon: Lokimon) => (\r\n                  <tr key={mon.id}>\r\n                    <td>{mon?.id}</td>\r\n                    <td>\r\n                      {' '}\r\n                      <div style={{ border: '2px solid gray', padding: '3px', borderRadius: '4px' }}>\r\n                        <img\r\n                          className=\"\"\r\n                          src={MonImages[`${mon.species + 1 || 0}`]}\r\n                          alt={mon?.species?.toString() || 'none'}\r\n                          height=\"45\"\r\n                          width=\"45\"\r\n                        />\r\n                      </div>\r\n                    </td>\r\n                    <td>{monName(mon?.species) || ''} </td>\r\n                    <td>{`HP ${mon?.hp}, ATK ${mon?.atk}, DEF ${mon?.def}, SPD ${mon?.speed}`}</td>\r\n                    <td>{`${formatUnits(mon?.price || 0)} ${nativeTok}`}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"rpgui-button\"\r\n                        type=\"button\"\r\n                        onClick={() => (mon?.id && mon?.price ? buyMon(mon?.id, mon?.price) : null)}\r\n                      >\r\n                        {isBuyMonLoading ? <Spinner color=\"#000\" /> : 'Buy'}\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Marketplace\r\n","E:\\lokimons\\Lokian.eth\\src\\components\\arena\\index.tsx",["277","278","279","280","281"],"import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../../App.css'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport Spinner from '../spinner'\r\nimport { Container, Row, Col, Table } from 'react-bootstrap'\r\nimport React, { useState } from 'react'\r\nimport \"./arena.css\";\r\n\r\nconst btnStyle = {\r\n  height: '38px',\r\n}\r\n\r\nconst Arena = () => {\r\n  const [online, setOnline] = useState('6')\r\n  const [duels, setDuels] = useState('1')\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p1A green-glow\">Arena</div>\r\n      <div\r\n        className=\"rpgui-container framed-grey table-container\"\r\n      >\r\n        <Container fluid>\r\n          <Row>\r\n            <Col sm={12} xs={12} md={6} lg={6} xl={6}>\r\n              <span className='online-count'>\r\n                Online: {online || '0'}\r\n              </span>\r\n            </Col>\r\n            <Col sm={12} xs={12} md={6} lg={6} xl={6}>\r\n              <div className=\"create-room-btn\">\r\n                <button className=\"rpgui-button\" type=\"button\">\r\n                  <span style={{ fontSize: '18px' }}>+</span> Create Room\r\n                </button>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row></Row>\r\n          <Row>\r\n            <Col>\r\n              <Table striped bordered hover variant=\"dark\" responsive>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Players</th>\r\n                    <th>Rounds</th>\r\n                    <th>Status</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>1</td>\r\n                    <td>0x12345abcde, 0x22345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Join\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>2</td>\r\n                    <td>0x32345abcde, 0x42345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Join\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>3</td>\r\n                    <td>0x52345abcde, 0x62345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Join\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  {/* create pagination */}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n\r\n              {/* My Duels */}\r\n              <div\r\n        className=\"rpgui-container framed-grey table-container\"\r\n      >\r\n        <Container fluid>\r\n        <Row style={{marginBottom: '12px'}}>\r\n            <Col sm={12} xs={12} md={6} lg={6} xl={6}>\r\n              <span className=\"my-duels\">\r\n                My Duels: {duels || '0'}\r\n              </span>\r\n            </Col>\r\n            <Col sm={12} xs={12} md={6} lg={6} xl={6}>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Table striped bordered hover variant=\"dark\" responsive>\r\n              <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Players</th>\r\n                    <th>Rounds</th>\r\n                    <th>Status</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>1</td>\r\n                    <td>0x12345abcde, 0x22345abcde</td>\r\n                    <td>3</td>\r\n                    <td>Waiting</td>\r\n                    <td>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Leave\r\n                      </button>\r\n                      <button className=\"rpgui-button\" type=\"button\" style={{ maxHeight: btnStyle.height }}>\r\n                        Start\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  </tbody>\r\n                </Table>\r\n                </Col>\r\n                </Row>\r\n        </Container>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Arena\r\n",{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"286","severity":1,"message":"287","line":12,"column":1,"nodeType":"288","endLine":18,"endColumn":2},{"ruleId":"289","severity":1,"message":"290","line":10,"column":36,"nodeType":"291","messageId":"292","endLine":10,"endColumn":39},{"ruleId":"289","severity":1,"message":"293","line":290,"column":10,"nodeType":"291","messageId":"292","endLine":290,"endColumn":22},{"ruleId":"289","severity":1,"message":"294","line":291,"column":10,"nodeType":"291","messageId":"292","endLine":291,"endColumn":22},{"ruleId":"289","severity":1,"message":"295","line":292,"column":10,"nodeType":"291","messageId":"292","endLine":292,"endColumn":16},{"ruleId":"289","severity":1,"message":"296","line":293,"column":10,"nodeType":"291","messageId":"292","endLine":293,"endColumn":16},{"ruleId":"289","severity":1,"message":"297","line":298,"column":10,"nodeType":"291","messageId":"292","endLine":298,"endColumn":17},{"ruleId":"298","severity":1,"message":"299","line":325,"column":6,"nodeType":"300","endLine":325,"endColumn":38,"suggestions":"301"},{"ruleId":"298","severity":1,"message":"299","line":341,"column":6,"nodeType":"300","endLine":341,"endColumn":60,"suggestions":"302"},{"ruleId":"298","severity":1,"message":"299","line":386,"column":6,"nodeType":"300","endLine":386,"endColumn":37,"suggestions":"303"},{"ruleId":"289","severity":1,"message":"304","line":531,"column":18,"nodeType":"291","messageId":"292","endLine":531,"endColumn":23},{"ruleId":"289","severity":1,"message":"305","line":835,"column":9,"nodeType":"291","messageId":"292","endLine":835,"endColumn":20},{"ruleId":"289","severity":1,"message":"306","line":866,"column":9,"nodeType":"291","messageId":"292","endLine":866,"endColumn":24},{"ruleId":"289","severity":1,"message":"307","line":882,"column":9,"nodeType":"291","messageId":"292","endLine":882,"endColumn":26},{"ruleId":"289","severity":1,"message":"308","line":898,"column":9,"nodeType":"291","messageId":"292","endLine":898,"endColumn":22},{"ruleId":"289","severity":1,"message":"309","line":914,"column":9,"nodeType":"291","messageId":"292","endLine":914,"endColumn":27},{"ruleId":"289","severity":1,"message":"310","line":935,"column":9,"nodeType":"291","messageId":"292","endLine":935,"endColumn":31},{"ruleId":"289","severity":1,"message":"311","line":960,"column":9,"nodeType":"291","messageId":"292","endLine":960,"endColumn":34},{"ruleId":"289","severity":1,"message":"312","line":987,"column":9,"nodeType":"291","messageId":"292","endLine":987,"endColumn":19},{"ruleId":"289","severity":1,"message":"313","line":1019,"column":9,"nodeType":"291","messageId":"292","endLine":1019,"endColumn":19},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"298","severity":1,"message":"314","line":21,"column":8,"nodeType":"300","endLine":21,"endColumn":10,"suggestions":"315"},{"ruleId":"316","severity":1,"message":"317","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":24},{"ruleId":"316","severity":1,"message":"318","line":3,"column":26,"nodeType":"291","messageId":"292","endLine":3,"endColumn":31},{"ruleId":"316","severity":1,"message":"319","line":5,"column":8,"nodeType":"291","messageId":"292","endLine":5,"endColumn":15},{"ruleId":"316","severity":1,"message":"320","line":14,"column":18,"nodeType":"291","messageId":"292","endLine":14,"endColumn":27},{"ruleId":"282","replacedBy":"321"},{"ruleId":"284","replacedBy":"322"},{"ruleId":"286","severity":1,"message":"287","line":12,"column":1,"nodeType":"288","endLine":18,"endColumn":2},{"ruleId":"289","severity":1,"message":"323","line":10,"column":23,"nodeType":"291","messageId":"292","endLine":10,"endColumn":34},{"ruleId":"289","severity":1,"message":"290","line":10,"column":36,"nodeType":"291","messageId":"292","endLine":10,"endColumn":39},{"ruleId":"298","severity":1,"message":"299","line":326,"column":6,"nodeType":"300","endLine":326,"endColumn":38,"suggestions":"324"},{"ruleId":"298","severity":1,"message":"299","line":344,"column":6,"nodeType":"300","endLine":344,"endColumn":60,"suggestions":"325"},{"ruleId":"298","severity":1,"message":"299","line":389,"column":6,"nodeType":"300","endLine":389,"endColumn":37,"suggestions":"326"},{"ruleId":"289","severity":1,"message":"305","line":838,"column":9,"nodeType":"291","messageId":"292","endLine":838,"endColumn":20},{"ruleId":"289","severity":1,"message":"306","line":869,"column":9,"nodeType":"291","messageId":"292","endLine":869,"endColumn":24},{"ruleId":"289","severity":1,"message":"307","line":885,"column":9,"nodeType":"291","messageId":"292","endLine":885,"endColumn":26},{"ruleId":"289","severity":1,"message":"308","line":901,"column":9,"nodeType":"291","messageId":"292","endLine":901,"endColumn":22},{"ruleId":"289","severity":1,"message":"309","line":917,"column":9,"nodeType":"291","messageId":"292","endLine":917,"endColumn":27},{"ruleId":"289","severity":1,"message":"310","line":938,"column":9,"nodeType":"291","messageId":"292","endLine":938,"endColumn":31},{"ruleId":"289","severity":1,"message":"311","line":963,"column":9,"nodeType":"291","messageId":"292","endLine":963,"endColumn":34},{"ruleId":"289","severity":1,"message":"312","line":990,"column":9,"nodeType":"291","messageId":"292","endLine":990,"endColumn":19},{"ruleId":"289","severity":1,"message":"313","line":1022,"column":9,"nodeType":"291","messageId":"292","endLine":1022,"endColumn":19},{"ruleId":"282","replacedBy":"321"},{"ruleId":"284","replacedBy":"322"},{"ruleId":"298","severity":1,"message":"314","line":21,"column":8,"nodeType":"300","endLine":21,"endColumn":10,"suggestions":"327"},{"ruleId":"298","severity":1,"message":"328","line":24,"column":6,"nodeType":"300","endLine":24,"endColumn":15,"suggestions":"329"},{"ruleId":"282","replacedBy":"330"},{"ruleId":"284","replacedBy":"331"},{"ruleId":"316","severity":1,"message":"332","line":4,"column":10,"nodeType":"291","messageId":"292","endLine":4,"endColumn":21},{"ruleId":"316","severity":1,"message":"333","line":4,"column":23,"nodeType":"291","messageId":"292","endLine":4,"endColumn":33},{"ruleId":"316","severity":1,"message":"334","line":4,"column":35,"nodeType":"291","messageId":"292","endLine":4,"endColumn":46},{"ruleId":"335","severity":1,"message":"336","line":36,"column":31,"nodeType":"337","messageId":"338","endLine":36,"endColumn":33},{"ruleId":"335","severity":1,"message":"336","line":36,"column":63,"nodeType":"337","messageId":"338","endLine":36,"endColumn":65},{"ruleId":"335","severity":1,"message":"336","line":63,"column":90,"nodeType":"337","messageId":"338","endLine":63,"endColumn":92},{"ruleId":"298","severity":1,"message":"339","line":25,"column":6,"nodeType":"300","endLine":25,"endColumn":15,"suggestions":"340"},{"ruleId":"335","severity":1,"message":"336","line":15,"column":23,"nodeType":"337","messageId":"338","endLine":15,"endColumn":25},{"ruleId":"335","severity":1,"message":"336","line":23,"column":23,"nodeType":"337","messageId":"338","endLine":23,"endColumn":25},{"ruleId":"335","severity":1,"message":"336","line":43,"column":23,"nodeType":"337","messageId":"338","endLine":43,"endColumn":25},{"ruleId":"298","severity":1,"message":"341","line":26,"column":6,"nodeType":"300","endLine":26,"endColumn":15,"suggestions":"342"},{"ruleId":"289","severity":1,"message":"317","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":24},{"ruleId":"289","severity":1,"message":"318","line":3,"column":26,"nodeType":"291","messageId":"292","endLine":3,"endColumn":31},{"ruleId":"289","severity":1,"message":"319","line":5,"column":8,"nodeType":"291","messageId":"292","endLine":5,"endColumn":15},{"ruleId":"289","severity":1,"message":"320","line":15,"column":18,"nodeType":"291","messageId":"292","endLine":15,"endColumn":27},{"ruleId":"289","severity":1,"message":"343","line":16,"column":17,"nodeType":"291","messageId":"292","endLine":16,"endColumn":25},"no-native-reassign",["344"],"no-negated-in-lhs",["345"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'Tab' is defined but never used.","Identifier","unusedVar","'fightChoice1' is assigned a value but never used.","'fightChoice2' is assigned a value but never used.","'winner' is assigned a value but never used.","'rounds' is assigned a value but never used.","'rewards' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshMons'. Either include it or remove the dependency array.","ArrayExpression",["346"],["347"],["348"],"'fight' is defined but never used.","'breedOption' is assigned a value but never used.","'myCryptomonsDiv' is assigned a value but never used.","'forSaleCryptomons' is assigned a value but never used.","'buyCryptomons' is assigned a value but never used.","'forBreedCryptomons' is assigned a value but never used.","'forFightWithCryptomons' is assigned a value but never used.","'forFightAgainstCryptomons' is assigned a value but never used.","'sharedByMe' is assigned a value but never used.","'sharedToMe' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["349"],"no-unused-vars","'ToastContainer' is defined but never used.","'toast' is defined but never used.","'Spinner' is defined but never used.","'setOnline' is assigned a value but never used.",["344"],["345"],"'NavDropdown' is defined but never used.",["350"],["351"],["352"],["353"],"React Hook useEffect has a missing dependency: 'myLokimons'. Either include it or remove the dependency array.",["354"],["344"],["345"],"'formatUnits' is defined but never used.","'parseEther' is defined but never used.","'formatEther' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'myCryptomons'. Either include it or remove the dependency array.",["355"],"React Hook useEffect has a missing dependency: 'otherCryptomons'. Either include it or remove the dependency array.",["356"],"'setDuels' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"357","fix":"365"},{"desc":"359","fix":"366"},{"desc":"361","fix":"367"},{"desc":"363","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},"Update the dependencies array to be: [activatingConnector, connector, refreshMons]",{"range":"375","text":"376"},"Update the dependencies array to be: [account, library, disableBuyItemBtn, disableFightBtn, refreshMons]",{"range":"377","text":"378"},"Update the dependencies array to be: [account, library, fightTxDone, refreshMons]",{"range":"379","text":"380"},"Update the dependencies array to be: [activate]",{"range":"381","text":"382"},{"range":"383","text":"376"},{"range":"384","text":"378"},{"range":"385","text":"380"},{"range":"386","text":"382"},"Update the dependencies array to be: [myLokimons, orderBy]",{"range":"387","text":"388"},"Update the dependencies array to be: [myCryptomons, orderBy]",{"range":"389","text":"390"},"Update the dependencies array to be: [orderBy, otherCryptomons]",{"range":"391","text":"392"},[9382,9414],"[activatingConnector, connector, refreshMons]",[9686,9740],"[account, library, disableBuyItemBtn, disableFightBtn, refreshMons]",[10945,10976],"[account, library, fightTxDone, refreshMons]",[572,574],"[activate]",[9420,9452],[9755,9809],[11014,11045],[552,554],[891,900],"[myLokimons, orderBy]",[956,965],"[myCryptomons, orderBy]",[1002,1011],"[orderBy, otherCryptomons]"]